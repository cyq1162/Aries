<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CYQ.Data</name>
    </assembly>
    <members>
        <member name="T:CYQ.Data.AppConfig">
            <summary>
            常用配置文件项[Web(App).Config]的[appSettings|connectionStrings]项和属性名一致。
            除了可以从配置文件配置，也可以直接赋值。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.SetApp(System.String,System.String)">
            <summary>
            设置Web.config或App.config的值 value为null时移除缓存。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetApp(System.String)">
            <summary>
            获取Web.config或App.config的值。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetApp(System.String,System.String)">
            <summary>
            获取Web.config或App.config的值（允许值不存在或为空时输出默认值）。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetAppInt(System.String,System.Int32)">
            <summary>
            获取Web.config或App.config的数字值（允许值不存在或为空时输出默认值）。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetAppBool(System.String,System.Boolean)">
            <summary>
            获取Web.config或App.config的数字值（允许值不存在或为空时输出默认值）。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetConn(System.String)">
            <summary>
            获取Web.config或App.config的connectionStrings节点的值。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.SetConn(System.String,System.String)">
            <summary>
            添加自定义链接（内存有效，并未写入config文件） value为null时移除缓存
            </summary>
            <param name="name">名称</param>
            <param name="connectionString">链接字符串</param>
        </member>
        <member name="P:CYQ.Data.AppConfig.IsEnumToInt">
            <summary>
            是否使用表字段枚举转Int方式（默认为false）。
            设置为true时，可以加快一点性能，但生成的表字段枚举必须和数据库一致。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.JsonEscape">
            <summary>
            是否ToJson输出时自动转义特殊符号("\ \r \t等)
            可配置项为（Default、Yes、No)
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Aop">
            <summary>
            Aop 插件配置项 示例配置：[ 完整类名,程序集(dll)名称]&lt;add key="Aop" value="Web.Aop.AopAction,Aop"/>
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.ThreadBreakPath">
            <summary>
            Tool.ThreadBreak 使用时，外置的文件配置相对路径（默认在环境变量Temp对应文件中）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.EntitySuffix">
            <summary>
            生成的实体类的后缀。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Version">
            <summary>
            获取当前Dll的版本号
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.RunPath">
            <summary>
            框架的运行路径(最外层的目录）
            Win项目：是dll和exe所在的目录；
            Asp.net项目：是指根目录；
            Asp.net core 项目：是指运行的路径（dll所在的路径，同Win项目）。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.AssemblyPath">
            <summary>
            框架的程序集所在的运行路径
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.EncryptKey">
            <summary>
            EncryptHelper加密的Key。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.WebRootPath">
            <summary>
            Web根目录(ASP.NET Core 项目时，由于机制不同，指向的路径需要调整，所以该值可以修改)
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.IsWeb">
            <summary>
            当前运行环境是否Web应用。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.IsNetCore">
            <summary>
            当前是否.NET Core环境。
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig.XHtml">
            <summary>
            XHtml 相关的配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.CDataLeft">
            <summary>
            Xml.XHtmlHelper 中使用的 "&lt;![CDATA[" 项
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.CDataRight">
            <summary>
            Xml.XHtmlHelper 中使用的 "]]&gt;" 项
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.DtdUri">
            <summary>
            Xml.XHtmlHelper 中操作Html需要配置的DTD解析文档相对路径
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.Domain">
            <summary>
            Xml.MutilLanguage 语言切换设置时Cookie所需要的网站主域名[不带www]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.SysLangKey">
            <summary>
            Xml.MutilLanguage 类的默认语言Key，默认值：Chinese
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig.DB">
            <summary>
            DataBase 相关的配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.IsTxtReadOnly">
            <summary>
            文本数据库是否只读（用于Demo演示，避免演示账号或数据被删除）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.IsPostgreLower">
            <summary>
            Postgre 是否小写模式(默认false)。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.DefaultConn">
            <summary>
            默认数据库链接（可赋完整链接语句或Web.config配置项名称）
            如果不在配置文件(Web.Config）上配置Conn链接，可对此属性赋值进行配置。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.DefaultDataBaseName">
            <summary>
            默认数据库名称（只读）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.DefaultDataBaseType">
            <summary>
            默认数据库类型（只读）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.FilterSqlInjection">
            <summary>
            MAction所有操作中的where条件，默认有超强的过滤单词，来过滤Sql注入关键字，如果语句包含指定的过滤词，则会返回错误信息，并记录日志。
            如果需要自定义关键字，可配置此项，如：“delete;from,truncate，其它单词”，分号表词组，需要同时包含两个词； 多个过滤词组以","逗号分隔
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.AutoID">
            <summary>
            MAction 操作 Oracle 时自增加int类型id所需要配置的序列id，Guid为id则不用。
            如果需要为每个表都配置一个序列号，可以使用：SEQ_{0} 其中{0}会自动配对成表名，如果没有{0}，则为整个数据库共用一个序列。
            默认参数值：SEQ_{0}
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.SchemaMapPath">
            <summary>
            MAction 可将表架构映射到外部指定相对路径[外部存储,可避开数据库读取]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.DeleteField">
            <summary>
            软删除字段名称（若表存在此设置的字段名称时，MActon的删除操作将变更变为更新操作）
            默认：IsDeleted（若不想启用，配置为空。）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.EditTimeFields">
            <summary>
            更新时间字段名称（若表存在指定字段名称时，自动更新时间，多个用逗号分隔）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.HiddenFields">
             <summary>
            系统全局要隐藏的字段名称（默认值为："cyqrownum,rowguid,deletefield"）
             </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.CommandTimeout">
            <summary>
            全局的数据库命令默认超时设置，默认值120秒（单位：秒）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.MasterSlaveTime">
            <summary>
            读写分离时用户对主数据库操作持续时间，默认值10秒s（单位：秒s）
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig.Cache">
            <summary>
            缓存相关的配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.MemCacheServers">
            <summary>
            MemCache分布式缓存的服务器配置，多个用逗号（,）分隔
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.MemCacheServersBak">
            <summary>
            MemCache 备份服务器（当主服务器挂了后，请求会转向备用机）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.RedisServers">
            <summary>
            Redis分布式缓存的服务器配置，多个用逗号（,）分隔
            格式：ip:port - password
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.RedisUseDBCount">
            <summary>
            Redis 使用的DB数（默认1，使用db0）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.RedisUseDBIndex">
            <summary>
            Redis 使用的DB 索引（默认0，若配置，则会忽略RedisUseDBCount）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.RedisServersBak">
            <summary>
            Redis  备份服务器（当主服务器挂了后，请求会转向备用机），多个用逗号（,）分隔
            格式：ip:port - password
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.DefaultCacheTime">
            <summary>
            Cache.CacheManage 默认缓存项的时间[分钟(默认60)]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.IsAutoCache">
            <summary>
            是否智能缓存数据（默认开启）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.CacheTables">
            <summary>
            AutoCache开启时，可以设置仅需要缓存的Table，多个用逗号分隔（此项配置时，NoCacheTables配置则被无忽略）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.NoCacheTables">
            <summary>
            AutoCache开启时，可以设置不缓存的Table，多个用逗号分隔
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.IngoreCacheColumns">
            <summary>
            AutoCache开启时，可以设置不受更新影响的列名，用Json格式。
            {talbeName1:'column1,column2',talbeName2:'column1,column2'}
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.AutoCacheConn">
            <summary>
            CYQ.Data.Cache 自动缓存 - 数据库链接配置
            在多个不同的应用项目里操作同一个数据库时（又不想使用分布式缓存MemCache或Redis），可以开启此项，达到缓存智能清除的效果。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.AutoCacheTaskTime">
            <summary>
            当AutoCacheConn开启后，定时扫描数据库的任务时间（毫秒）,默认1000
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig.Log">
            <summary>
            日志类Log 相关的配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Log.LogConn">
            <summary>
            CYQ.Data.Log 类记录数据库异常日志 - 数据库链接配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Log.LogPath">
            <summary>
            文本日志的配置相对路径（默认为：Logs/"）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Log.IsWriteLog">
            <summary>
            是否写数据库异常日志（默认true）:开启时：有异常不抛出，转写入数据库；不开启：有异常会抛出
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Log.LogTableName">
            <summary>
            异常日志表名（默认为SysLogs，可配置）
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig.Debug">
            <summary>
            调试类AppDebug 相关的配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Debug.SqlFilter">
             <summary>
            毫秒数（这个是在对所有SQL语句的：将所有长时间(ms)的SQL语句写入日志，对应配置项LogPath的路径）
             此项设置后，即启用（无视OpenDebugInfo是否设置）
             </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Debug.InfoFilter">
            <summary>
            毫秒数（这个是在AppDebug开启后的：可通过此项设置条件过滤出时间(ms)较长的SQL语句）
            OpenDebugInfo为true，同时 AppDebug.Start() 后，此项才有效。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Debug.OpenDebugInfo">
            <summary>
            开启信息调试记录：开启后MAction.DebugInfo可输出执行日志。
            同时AppDebug若要使用，也需要开启此项。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.UI.AutoPrefixs">
            <summary>
            UI取值的默认前缀（ddl,chb,txt)，多个用逗号（,）分隔
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConst">
            <summary>
            内部常量类
            </summary>
        </member>
        <member name="F:CYQ.Data.AppConst.InvalidFileNameChars">
            <summary>
            无效的文件路径字符
            </summary>
        </member>
        <member name="F:CYQ.Data.AppConst._DLLFullName">
            <summary>
            框架程序集名称
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConst.AssemblyPath">
            <summary>
            框架的程序集所在的运行路径
            </summary>
        </member>
        <member name="T:CYQ.Data.AppDebug">
             <summary>
             this class can intercept sql
            <para> 应用程序调试类,能截到应用程序所有执行的SQL</para>
             </summary>
        </member>
        <member name="F:CYQ.Data.AppDebug.IsContainSysSql">
            <summary>
            输出信息时是否包含框架内部Sql（默认否，屏蔽框架内部产生的Sql）。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppDebug.Start(System.Boolean)">
            <summary>
            start to record sql
            <para>开始记录调试信息</para>
            <param name="isContainSysSql">是否包含框架内部Sql（默认否）</param>
            </summary>
        </member>
        <member name="M:CYQ.Data.AppDebug.Start">
            <summary>
            start to record sql
            <para>开始记录调试信息</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.AppDebug.Stop">
            <summary>
            stop to record sql
            <para>停止并清除记录的调试信息</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.AppDebug.IsRecording">
            <summary>
            is recoreding sql ?
            <para>正在记录中</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.AppDebug.Info">
            <summary>
            get sql detail info
            <para>获取调试信息</para>
            </summary>
        </member>
        <member name="T:CYQ.Data.MAction">
             <summary>
             Manipulate：table / view / custom statement
            <para>操作：表/视图/自定义语句</para>
             </summary>
        </member>
        <member name="F:CYQ.Data.MAction._sourceTableName">
            <summary>
            原始传进来的表名/视图名，未经过[多数据库转换处理]格式化。
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetidentityInsertOn">
            <summary>
            MSSQL插入标识id时开启此选项[事务开启时有效]
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetidentityInsertOff">
            <summary>
            MSSQL插入标识id后关闭此选项[事务开启时有效]
            </summary>;
        </member>
        <member name="M:CYQ.Data.MAction.#ctor(System.Object)">
            <summary>
            Instantiation
            <para>实例化</para>
            </summary>
            <param name="tableNamesEnum">Parameters: table name, view, custom statement, DataRow
            <para>参数：表名、视图、自定义语句、MDataRow</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.#ctor(System.Object,System.String)">
            <param name="conn">Database connection statement or configuration key
            <para>数据库链接语句或配置Key</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.ResetTable(System.Object)">
            <summary>
            Toggle Table Action: To switch between other tables, use this method
            <para>切换表操作：如需操作其它表，通过此方法切换</para>
            </summary>
            <param name="tableObj">Parameters: table name, view, custom statement, DataRow
            <para>参数：表名、视图、自定义语句、MDataRow</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.ResetTable(System.Object,System.Boolean)">
            <param name="resetState">Reset Row State (defaultValue:true)
            <para>是否重置原有的数据状态（默认true)</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.ResetTable(System.Object,System.Boolean,System.String)">
            <param name="newDbName">Other DataBaseName
            <para>其它数据库名称</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Insert">
            <summary>
            Insert To DataBase
             <para>插入数据</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Insert(CYQ.Data.InsertOp)">
            <param name="option">InsertOp
            <para>插入选项</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Insert(System.Boolean)">
            <param name="autoSetValue">Automatic get values from context
            <para>自动取值（从上下文环境中）</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Insert(System.Boolean,CYQ.Data.InsertOp)">
            <param name="option">InsertOp
            <para>插入选项</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Update">
            <summary>
            Update to database [Will automatically try to fetch from the UI when conditions are not passed]
            <para>更新数据[不传where条件时将自动尝试从UI获取]</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Update(System.Object)">
            <param name="where">Sql statement where the conditions: 88, "id = 88"
            <para>sql语句的where条件：88、"id=88"</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Update(System.Boolean)">
            <param name="autoSetValue">Automatic get values from context
            <para>自动取值（从上下文环境中）</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Update(System.Object,System.Boolean)">
            <param name="autoSetValue">Automatic get values from context
            <para>自动取值（从上下文环境中）</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Delete">
            <summary>
            Delete from database [Will automatically try to fetch from the UI when conditions are not passed]
            <para>删除数据[不传where条件时将自动尝试从UI获取]</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Delete(System.Object,System.Boolean)">
            <param name="where">Sql statement where the conditions: 88, "id = 88"
            <para>sql语句的where条件：88、"id=88"</para></param>
            <param name="isIgnoreDeleteField">当DeleteField被设置后（删除转更新操作），如果仍想删除操作（可将此属性置为true）</param>
        </member>
        <member name="M:CYQ.Data.MAction.Select">
             <summary>
             select all data
            <para>选择所有数据</para>
             </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Select(System.Object)">
            <param name="where">Sql statement where the conditions: 88, "id = 88"
            <para>sql语句的where条件：88、"id=88"</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Select(System.Int32,System.Int32)">
            <param name="pageIndex">pageIndex<para>第几页</para></param>
            <param name="pageSize">pageSize<para>每页数量[为0时默认选择所有]</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Select(System.Int32,System.Int32,System.Object,System.Int32@)">
            <param name="count">The total number of records returned
            <para>返回的记录总数</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.SelectList``1">
             <summary>
             select all data
            <para>选择所有数据</para>
             </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SelectList``1(System.Object)">
            <param name="where">Sql statement where the conditions: 88, "id = 88"
            <para>sql语句的where条件：88、"id=88"</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.SelectList``1(System.Int32,System.Int32)">
            <param name="pageIndex">pageIndex<para>第几页</para></param>
            <param name="pageSize">pageSize<para>每页数量[为0时默认选择所有]</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.SelectList``1(System.Int32,System.Int32,System.Object,System.Int32@)">
            <summary>
            查询后直接返回泛型列表（节省一次转换时间）。
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SelectJson">
             <summary>
             select all data
            <para>选择所有数据</para>
             </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SelectJson(System.Object)">
            <param name="where">Sql statement where the conditions: 88, "id = 88"
            <para>sql语句的where条件：88、"id=88"</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.SelectJson(System.Int32,System.Int32)">
            <param name="pageIndex">pageIndex<para>第几页</para></param>
            <param name="pageSize">pageSize<para>每页数量[为0时默认选择所有]</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.SelectJson(System.Int32,System.Int32,System.Object,System.Int32@,System.Boolean,System.String)">
            <summary>
            查询后直接返回Json字符串（节省一次转换时间）。
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Fill">
            <summary>
            Select top one row to fill this.Data
            <para>选择一行数据，并填充到Data属性[不传where条件时将自动尝试从UI获取]</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Fill(System.Object)">
            <param name="where">Sql statement where the conditions: 88, "id = 88"
            <para>sql语句的where条件：88、"id=88"</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.GetCount">
            <summary>
            Returns the number of records
            <para>返回记录数</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.GetCount(System.Object)">
            <param name="where">Sql statement where the conditions: 88, "id = 88"
            <para>sql语句的where条件：88、"id=88"</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Exists">
            <summary>
            Whether or not the specified condition exists
            <para>是否存在指定条件的数据</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Exists(System.Object)">
            <param name="where">Sql statement where the conditions: 88, "id = 88"
            <para>sql语句的where条件：88、"id=88"</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Get``1(System.Object)">
            <summary>
            Get value from this.Data
            <para>从Data属性里取值</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Get``1(System.Object,``0)">
            <param name="defaultValue">defaultValue<para>值为Null时的默认替换值</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Set(System.Object,System.Object)">
            <summary>
            Set value to this.Data
            <para>为Data属性设置值</para>
            </summary>
            <param name="key">columnName<para>列名</para></param>
            <param name="value">value<para>值</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Set(System.Object,System.Object,System.Int32)">
            <param name="state">set value state (0: unchanged; 1: assigned, the same value [insertable]; 2: assigned, different values [updateable])
            <para>设置值状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.Sets(System.Object,System.Object[])">
            <summary>
            为行连续设置值多个值
            </summary>
            <param name="startKey">起始行索引||起始列名</param>
            <param name="values">多个值</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MAction.SetExpression(System.String)">
            <summary>
            Sets a custom expression for the Update operation.
            <para>为Update操作设置自定义表达式。</para>
            </summary>
            <param name="updateExpression">as："a=a+1"<para>如："a=a+1"</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.SetPara(System.Object,System.Object)">
            <summary>
            Parameterized pass [used when the Where condition is a parameterized (such as: name = @ name) statement]
            <para>参数化传参[当Where条件为参数化(如：name=@name)语句时使用]</para>
            </summary>
            <param name="paraName">paraName<para>参数名称</para></param>
            <param name="value">value<para>参数值</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.SetPara(System.Object,System.Object,System.Data.DbType)">
            <param name="dbType">dbType<para>参数类型</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.SetPara(System.Collections.Generic.List{CYQ.Data.Aop.AopCustomDbPara})">
            <summary>
            Aop scenes can only be used by the parameterization of the Senate
            <para>Aop场景才可能使用的参数化传参</para>
            </summary>
            <param name="customParas">Paras<para>参数列表</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.ClearPara">
            <summary>
            Clears paras (from SetPara method)
            <para>清除(SetPara设置的)自定义参数</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.ClearParameters">
            <summary>
            清除系统参数[保留自定义参数]
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetSelectColumns(System.Object[])">
            <summary>
            Specifies the column to read
            <para>指定读取的列</para>
            </summary>
            <param name="columnNames">as："columnA","columnB as B"</param>
        </member>
        <member name="M:CYQ.Data.MAction.GetWhere(System.Boolean,CYQ.Data.Table.MDataCell[])">
            <summary>
             Get where statement
            <para>根据元数据列组合where条件。</para>
            </summary>
            <param name="isAnd">connect by and/or<para>true为and连接，反之为or链接</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.GetWhere(CYQ.Data.Table.MDataCell[])">
            <param name="cells">MDataCell<para>单元格</para></param>
        </member>
        <member name="M:CYQ.Data.MAction.SetTransLevel(System.Data.IsolationLevel)">
            <summary>
            Set the transaction level
            <para>设置事务级别</para>
            </summary>
            <param name="level">IsolationLevel</param>
        </member>
        <member name="M:CYQ.Data.MAction.BeginTransation">
            <summary>
            Begin Transation
            <para>开始事务</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.EndTransation">
            <summary>
            Commit Transation
            <para>提交事务</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.RollBack">
            <summary>
            RollBack Transation
            <para>事务回滚</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Dispose(System.Boolean)">
            <summary>
            Dispose
            <para>释放资源</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetAopState(CYQ.Data.Aop.AopOp)">
            <summary>
            Set Aop State
            <para>设置Aop状态</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetAopPara(System.Object)">
            <summary>
            Pass additional parameters for Aop use
            <para>传递额外的参数供Aop使用</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.Data">
            <summary>
            Archive the rows of the data structure
            <para>存档数据结构的行</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.TableName">
             <summary>
             Table name (if the view statement is the operation, the final view of the name)
            <para>当前操作的表名(若操作的是视图语句，则为最后的视图名字</para> ）
             </summary>
        </member>
        <member name="P:CYQ.Data.MAction.ConnString">
             <summary>
             The database connection string
            <para>数据库链接字符串</para> 
             </summary>
        </member>
        <member name="P:CYQ.Data.MAction.ConnName">
             <summary>
             The database connection name
            <para>数据库链接配置名称</para> 
             </summary>
        </member>
        <member name="P:CYQ.Data.MAction.DebugInfo">
             <summary>
             Get or set debugging information [need to set App Config.Debug.Open DebugInfo to ture]
            <para>获取或设置调试信息[需要设置AppConfig.Debug.OpenDebugInfo为ture]</para>
             </summary>
        </member>
        <member name="P:CYQ.Data.MAction.DataBaseType">
            <summary>
            The database type
            <para>数据库类型</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.DataBaseName">
            <summary>
            The database name
            <para>数据库名称</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.DataBaseVersion">
            <summary>
            The database version
            数据库的版本号
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.RecordsAffected">
            <summary>
            The number of rows affected when executing a SQL command (-2 is an exception)
            <para>执行SQL命令时受影响的行数（-2则为异常）。</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.IsTransation">
            <summary>
            是否事务进行中
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.TimeOut">
             <summary>
             Command Timeout[seconds]
            <para>命令超时设置[单位秒]</para>
             </summary>
        </member>
        <member name="P:CYQ.Data.MAction.AllowInsertID">
             <summary>
             Whether to allow manual insertion of ids for self-incrementing primary key identification
            <para>自增主键标识的，是否允许手动插入id</para> 
             </summary>
        </member>
        <member name="P:CYQ.Data.MAction.IsUseAutoCache">
            <summary>
            获取或设置当前操作是否使用自动缓存
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.UI">
            <summary>
            Manipulate UI
            <para>UI操作</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.Sql">
            <summary>
            for build where sql easyer
            <para>UI操作</para>
            </summary>
        </member>
        <member name="T:CYQ.Data.MProc">
             <summary>
             Manipulate：sql / procedure
            <para>操作：SQL或存储过程</para>
             </summary>
        </member>
        <member name="M:CYQ.Data.MProc.op_Implicit(CYQ.Data.MAction)~CYQ.Data.MProc">
            <summary>
            Change MAction to MProc
            <para>将一个MAction 转换成一个MProc。</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.#ctor(System.Object)">
            <summary>
            Instantiation
            <para>实例化</para>
            </summary>
            <param name="procNameOrSql">Parameters: sql or procedure
            <para>参数：SQL语句或存储过程名称</para></param>
        </member>
        <member name="M:CYQ.Data.MProc.ResetProc(System.Object,System.Boolean)">
            <summary>
            <param name="isClearPara">IsClearParameters
            <para>是否清除参数</para></param>
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.ResetProc(System.Object)">
            <summary>
             Toggle tProc Action: To switch between other sql/procedure, use this method
             <para>切换操作：如需操作其它语句或存储过程，通过此方法切换</para>
             </summary>
             <param name="procNameOrSql">Parameters: sql or procedure
             <para>参数：存储过程名或Sql语句</para></param>
        </member>
        <member name="M:CYQ.Data.MProc.ExeMDataTable">
            <summary>
            Get MDataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.ExeList``1">
            <summary>
            执行并返回泛型列表类型。
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.ExeJson">
            <summary>
            执行列表数据并返回Json格式字符串。
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.ExeJson(System.Boolean,System.String)">
            <summary>
            执行列表数据并返回Json格式字符串。
            </summary>
            <param name="isConvertNameToLower">字段是否返回小写</param>
            <param name="dateTimeFormatter">是否需要格式化时间，默认：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MProc.ExeMDataTableList">
            <summary>
            Get MDataTables
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.ExeNonQuery">
            <summary>
            Returns the number of rows affected [used to insert update or delete], and returns -2 if an exception is executed
            <para>返回受影响的行数[用于更新或删除]，执行异常时返回-2</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.ExeScalar``1">
            <summary>
            Returns the value of the first column of the first row
            <para>返回首行首列的值</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.Set(System.Object,System.Object)">
            <summary>
            <para>Set Input Para</para>
            <para>设置存储过程Input参数</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetCustom(System.Object,CYQ.Data.ParaType)">
            <summary>
            设置特殊自定义参数
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetCustom(System.Object,CYQ.Data.ParaType,System.Object)">
            <summary>
            <para>Set the stored procedure OutPut, the return value and other special types of parameters</para>
            <para>设置存储过程OutPut、返回值等特殊类型参数</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetCustom(System.Object,CYQ.Data.ParaType,System.Object,System.String)">
            <param name="typeName">MSSQL The name of the user-defined table type<para>MSSQL的用户定义表类型的名称</para></param>
        </member>
        <member name="M:CYQ.Data.MProc.Clear">
            <summary>
            Clear Parameters
            <para>清除存储过程参数</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetAopState(CYQ.Data.Aop.AopOp)">
            <summary>
            Set Aop State
            <para>设置Aop状态</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetAopPara(System.Object)">
            <summary>
            Pass additional parameters for Aop use
            <para>传递额外的参数供Aop使用</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetTransLevel(System.Data.IsolationLevel)">
            <summary>
            Set the transaction level
            <para>设置事务级别</para>
            </summary>
            <param name="level">IsolationLevel</param>
        </member>
        <member name="M:CYQ.Data.MProc.BeginTransation">
            <summary>
            Begin Transation
            <para>开始事务</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.EndTransation">
            <summary>
            Commit Transation
            <para>提交事务</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.RollBack">
            <summary>
            RollBack Transation
            <para>事务回滚</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.Dispose">
            <summary>
            Dispose
            <para>释放资源</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.DebugInfo">
             <summary>
             Get or set debugging information [need to set App Config.Debug.Open DebugInfo to ture]
            <para>获取或设置调试信息[需要设置AppConfig.Debug.OpenDebugInfo为ture]</para>
             </summary>
        </member>
        <member name="P:CYQ.Data.MProc.DataBaseType">
            <summary>
            The database type
            <para>数据库类型</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.DataBaseName">
            <summary>
            The database name
            <para>数据库名称</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.DataBaseVersion">
            <summary>
            The database version
            数据库的版本号
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.RecordsAffected">
            <summary>
            The number of rows affected when executing a SQL command (-2 is an exception)
            <para>执行SQL命令时受影响的行数（-2则为异常）。</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.IsTransation">
            <summary>
            是否事务进行中
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.ConnString">
             <summary>
             The database connection string
            <para>数据库链接字符串</para> 
             </summary>
        </member>
        <member name="P:CYQ.Data.MProc.ConnName">
             <summary>
             The database connection name
            <para>数据库链接配置名称</para> 
             </summary>
        </member>
        <member name="P:CYQ.Data.MProc.TimeOut">
             <summary>
             Command Timeout[seconds]
            <para>命令超时设置[单位秒]</para>
             </summary>
        </member>
        <member name="P:CYQ.Data.MProc.ReturnValue">
            <summary>
            Get Procedure Return Value
            <para>存储过程的返回值</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.OutPutValue">
            <summary>
            The OutPut value for the stored procedure: Dictionary for multiple values
            <para>存储过程的OutPut值：多个值时为Dictionary</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.IsUseAutoCache">
            <summary>
            获取或设置当前操作是否使用自动缓存
            </summary>
        </member>
        <member name="T:CYQ.Data.DalBase">
            <summary>
            数据库操作基类 （模板模式：Template Method）
            属性管理
            </summary>
            <summary>
            执行管理
            </summary>
            <summary>
            链接管理
            </summary>
        </member>
        <member name="F:CYQ.Data.DalBase.DebugInfo">
            <summary>
            记录SQL语句信息
            </summary>
        </member>
        <member name="F:CYQ.Data.DalBase.RecordsAffected">
            <summary>
            执行命令时所受影响的行数（-2为发生异常）。
            </summary>
        </member>
        <member name="F:CYQ.Data.DalBase.IsOpenTrans">
            <summary>
            当前是否开启事务
            </summary>
        </member>
        <member name="F:CYQ.Data.DalBase.ConnObj">
            <summary>
            数据库主从备链接管理对象;
            </summary>
        </member>
        <member name="F:CYQ.Data.DalBase.UsingConnBean">
            <summary>
            当前使用中的链接对象
            </summary>
        </member>
        <member name="F:CYQ.Data.DalBase.IsWriteLogOnError">
            <summary>
            是否允许进入写日志中模块(默认true)
            </summary>
        </member>
        <member name="M:CYQ.Data.DalBase.ChangeDatabase(System.String)">
            <summary>
            切换数据库（修改数据库链接）
            </summary>
        </member>
        <member name="M:CYQ.Data.DalBase.IsOwnerOtherDb(System.String)">
            <summary>
            是否数据库名称变化了
            </summary>
            <param name="dbTableName"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.DalBase.AddReturnPara">
            <summary>
            处理内置的MSSQL和Oracle两种存储过程分页
            </summary>
        </member>
        <member name="M:CYQ.Data.DalBase.WriteTime">
            <summary>
            记录执行时间
            </summary>
        </member>
        <member name="M:CYQ.Data.DalBase.RollBack">
            <summary>
            事务（有则）回滚
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.DalBase.WriteError(System.String)">
            <summary>
            输出错误（若事务中，回滚事务）
            </summary>
            <param name="err"></param>
        </member>
        <member name="M:CYQ.Data.DalBase.TestConn(CYQ.Data.AllowConnLevel)">
            <summary>
            测试链接
            </summary>
            <param name="allowLevel">1：只允许当前主链接；2：允许主备链接；3：允许主备从链接</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.DalBase.ResetConn(CYQ.Data.ConnBean)">
            <summary>
            切换链接
            </summary>
        </member>
        <member name="M:CYQ.Data.DalBase.OpenCon">
            <summary>
            打开链接，只切主备(同时有N秒的主库定位)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.DalBase.OpenCon(CYQ.Data.ConnBean,CYQ.Data.AllowConnLevel)">
            <summary>
            打开链接，允许切从。
            </summary>
        </member>
        <member name="P:CYQ.Data.DalBase.ConnName">
            <summary>
            原生态传进来的配置名（或链接）
            </summary>
        </member>
        <member name="P:CYQ.Data.DalBase.DataBaseName">
            <summary>
            获得链接的数据库名称
            </summary>
        </member>
        <member name="P:CYQ.Data.DalBase.Version">
            <summary>
            数据库的版本号
            </summary>
        </member>
        <member name="P:CYQ.Data.DalBase.DataBaseType">
            <summary>
            当前操作的数据库类型
            </summary>
        </member>
        <member name="P:CYQ.Data.DalBase.IsRecordDebugInfo">
            <summary>
            是否允许记录SQL语句 (内部操作会关掉此值为False）
            </summary>
        </member>
        <member name="P:CYQ.Data.DalBase.ReturnValue">
            <summary>
            存储过程返回值。
            </summary>
        </member>
        <member name="P:CYQ.Data.DalBase.OutPutValue">
            <summary>
            存储过程OutPut输出参数值。
            如果只有一个输出，则为值；
            如果有多个输出，则为Dictionary。
            </summary>
        </member>
        <member name="M:CYQ.Data.NoSqlAction.Clear">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="M:CYQ.Data.NoSqlAction.ResetStaticVar">
            <summary>
            重置静态变量（方便回收内存，避免大量导数据后内存不回收）
            </summary>
        </member>
        <member name="F:CYQ.Data.NoSqlAction._needToSaveState">
            <summary>
             是否需要更新：0未更新；1仅插入[往后面插数据]；2更新删除或插入[重新保存],//需要更新[全局的可以有效处理并发]
            </summary>
        </member>
        <member name="F:CYQ.Data.NoSqlAction._Table">
            <summary>
            最后的写入时间
            </summary>
        </member>
        <member name="F:CYQ.Data.NoSqlAction._FileFullName">
            <summary>
            包含路径的完整文件名称
            </summary>
        </member>
        <member name="F:CYQ.Data.NoSqlAction._FileName">
            <summary>
            （文件名）：不包含路径的文件名称(带扩展名)
            </summary>
        </member>
        <member name="F:CYQ.Data.NoSqlAction.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:CYQ.Data.NoSqlAction.Reset(CYQ.Data.Table.MDataRow@,System.String,System.String,CYQ.Data.DataBaseType)">
            <summary>
            切换表
            </summary>
            <param name="row">数据行结构</param>
            <param name="fileName">文件名称</param>
            <param name="filePath">文件路径</param>
            <param name="dalType">数据类型</param>
        </member>
        <member name="M:CYQ.Data.NoSqlAction.CheckFileChanged(System.Boolean)">
            <summary>
            检测文件是否已被修改过
            </summary>
            <param name="isNeedToReloadTable"></param>
        </member>
        <member name="P:CYQ.Data.NoSqlAction.NextID">
            <summary>
            下一个自增加id
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopInfo">
            <summary>
            Aop参数信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.DalType">
            <summary>
            数据类型(只读)
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.DataBase">
            <summary>
            数据库名称(只读)
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.ConnectionString">
            <summary>
            数据库链接（只读）
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.AopPara">
            <summary>
            AOP的自定义参数
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.IsTransaction">
            <summary>
            是否事务中
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.MAction">
            <summary>
            当前上下文的处理程序。
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.TableList">
            <summary>
            数据列表
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.Table">
            <summary>
            数据表
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.Row">
            <summary>
            数据行
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.Where">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.AutoSetValue">
            <summary>
            自动从Form表单提取值[插入或更新时使用]
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.InsertOp">
            <summary>
            数据插入选项
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.PageIndex">
            <summary>
            分页起始页
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.PageSize">
            <summary>
            分页每页条数
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.UpdateExpression">
            <summary>
            更新操作的附加表达式。
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.SelectColumns">
            <summary>
            指定的查询列
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.IsSuccess">
            <summary>
            Begin方法是否调用成功[在End中使用]
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.TotalCount">
            <summary>
            查询时返回的记录总数（分页总数）
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.RowCount">
            <summary>
            查询时返回的显示数量
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.CustomDbPara">
            <summary>
            用户调用SetPara新增加的自定义参数
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.MProc">
            <summary>
            当前上下文的处理程序。
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.ProcName">
            <summary>
            存储过程名或SQL语句
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.IsProc">
            <summary>
            是否存储过程
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.DBParameters">
            <summary>
            命令参数
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.ExeResult">
            <summary>
            执行后返回的结果
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopCustomDbPara">
            <summary>
            设置自定义参数[使用MAction时，对Where条件进行的参数化传参使用]
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopCustomDbPara.ParaName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopCustomDbPara.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopCustomDbPara.ParaDbType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.AutoCache">
            <summary>
            内部智能缓存
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.AutoCache.cacheKeys">
            <summary>
            单机存档： 表的baseKey:key1,key2,key3...
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.AutoCache.KeyTable.ActionInstance">
            <summary>
            使用同一个链接，并且不关闭。
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.CacheManage">
            <summary>
            全局缓存类
            </summary>
            <example><code>
            使用示例：
            实例化： CacheManage cache=CacheManage.Instance;
            添加：   Cache.Set("路过秋天",new MDataTable);
            判断：   if(cache.Contains("路过秋天"))
                     {
            获取：       MDataTable table=cache.Get("路过秋天") as MDataTable;
                     }
            </code></example>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Set(System.String,System.Object)">
            <summary>
            设置一个Cache对象
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Clear">
            <summary>
            清除所有缓存
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Get(System.String)">
            <summary>
            获得一个Cache对象
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Get``1(System.String)">
            <summary>
            获得一个Cache对象
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Remove(System.String)">
            <summary>
            删除一个Cache对象
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.GetKey(CYQ.Data.Cache.CacheKeyType,System.String)">
            <summary>
            获取系统内部缓存Key
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.GetKey(CYQ.Data.Cache.CacheKeyType,System.String,System.String)">
            <summary>
            获取系统内部缓存Key
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.Instance">
            <summary>
            返回唯一实例(根据配置(AppConfig.Cache.XXXCacheServers)决定启用顺序：Redis、MemCache、本地缓存）
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.LocalInstance">
            <summary>
            单机本地缓存
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.MemCacheInstance">
            <summary>
            MemCache缓存（需要配置AppConfig.Cache.MemCacheServers）
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.RedisInstance">
            <summary>
            Redis缓存（需要配置AppConfig.Cache.RedisServers）
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.CacheType">
            <summary>
            缓存的实例类型
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.CacheInfo">
            <summary>
            缓存的信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.Count">
            <summary>
            获和缓存总数
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.WorkInfo">
            <summary>
            缓存的工作信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.LocalShell.instance">
            <summary>
            兼容NetCore下迷一般的Bug的写法。
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.CacheType">
            <summary>
            支持的Cache类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheType.LocalCache">
            <summary>
            本地缓存
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheType.MemCache">
            <summary>
            MemCached分布式缓存
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheType.Redis">
            <summary>
            Redis分布式缓存
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.CacheKeyType">
            <summary>
            Cache的Key类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheKeyType.Schema">
            <summary>
            表架构的Key
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheKeyType.AutoCache">
            <summary>
            智能缓存Key
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.InterAop">
            <summary>
            内部预先实现CacheAop
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.InterAop.Para">
            <summary>
            Aop参数
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopEnum">
            <summary>
            框架内部数据库操作方法枚举
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.SelectList">
            <summary>
            Orm (DBFast、SimpleOrmBase等查询返回实体列表）
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopResult">
            <summary>
            Aop函数的处理结果
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopResult.Default">
            <summary>
            本结果将执行原有事件，但跳过Aop.End事件
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopResult.Continue">
            <summary>
            本结果将继续执行原有事件和Aop.End事件
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopResult.Break">
            <summary>
            本结果将跳过原有事件,但会执行Aop End事件
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopResult.Return">
            <summary>
            本结果将直接跳出原有函数的执行
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopOp">
            <summary>
            Aop开关选项
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopOp.OpenAll">
            <summary>
            正常打开
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopOp.OnlyInner">
            <summary>
            仅打开内部Aop（即自动缓存，关闭外部Aop）
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopOp.OnlyOuter">
            <summary>
            仅打开外部Aop（关闭自动缓存）
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopOp.CloseAll">
            <summary>
            内外都关（自动缓存和外部Aop）
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.IAop">
            <summary>
            Aop接口，需要实现时继承
            </summary>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.Begin(CYQ.Data.Aop.AopEnum,CYQ.Data.Aop.AopInfo)">
            <summary>
            方法调用之前被调用
            </summary>
            <param name="action">方法名称</param>
            <param name="objName">表名/存储过程名/视图名/sql语句</param>
            <param name="result">方法中可能返回的参数</param>
            <param name="aopInfo">附带分支参数</param>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.End(CYQ.Data.Aop.AopEnum,CYQ.Data.Aop.AopInfo)">
            <summary>
            方法调用之后被调用
            </summary>
            <param name="action">方法名称</param>
            <param name="success">调用是否成功</param>
            <param name="result">一般调用后的id[或MDataRow/MDataTable]</param>
            <param name="aopInfo">附带分支参数</param>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.OnError(System.String)">
            <summary>
            数据库操作产生异常时,引发此方法
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.Clone">
            <summary>
            克隆返回一个新的对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.OnLoad">
            <summary>
            Aop 首次加载时被触发的事件
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.LocalCache">
            <summary>
            单机缓存类
            为兼容.NET Core 去掉Web.Caching，重写
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Get(System.String)">
            <summary>
            获得一个Cache对象
            </summary>
            <param name="key">标识</param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Contains(System.String)">
            <summary>
            是否存在缓存
            </summary>
            <param name="key">标识</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Set(System.String,System.Object)">
            <summary>
            添加一个Cache对象
            </summary>
            <param name="key">标识</param>
            <param name="value">对象值</param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Set(System.String,System.Object,System.Double)">
            <param name="cacheMinutes">缓存时间(单位分钟)</param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Set(System.String,System.Object,System.Double,System.String)">
            <param name="fileName">文件依赖路径</param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Remove(System.String)">
            <summary>
            删除一个Cache对象
            </summary>
            <param name="key">标识</param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.RemoveList(System.Collections.Generic.List{System.String})">
            <summary>
            移除Key和Value
            </summary>
            <param name="removeKeys"></param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Clear">
            <summary>
            清除所有缓存
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.LocalCache.CacheInfo">
            <summary>
            获取缓存信息对象列表
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.LocalCache.WorkInfo">
            <summary>
            内存工作信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.LocalCache.Count">
            <summary>
            获和缓存总数
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.MemCache">
            <summary>
            MemCache分布式缓存类
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.ClientBase.hostServer">
            <summary>
            主机服务
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.ClientBase.compressionThreshold">
            <summary>
            指定数据长度超过值时进行压缩，默认128K
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.ClientBase.hash(System.String)">
            <summary>
            Private key hashing method that uses the modified FNV hash.
            </summary>
            <param name="key">The key to hash.</param>
            <returns>The hashed key.</returns>
        </member>
        <member name="M:CYQ.Data.Cache.ClientBase.checkKey(System.String)">
            <summary>
            Private key-checking method.
            Throws an exception if the key does not conform to memcached protocol requirements:
            It may not contain whitespace, it may not be null or empty, and it may not be longer than 250 characters.
            </summary>
            <param name="key">The key to check.</param>
        </member>
        <member name="M:CYQ.Data.Cache.ClientBase.GetAllHostNodeStatus">
            <summary>
            获取主机节点的基础信息
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.HostConfigWatch">
            <summary>
            用于监控分布式缓存的配置列表，实际高可用，动态加载，而不需要关停运行的服务。
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.HostConfigWatch.HostList">
            <summary>
            存档配置文件对应的原始主机列表。
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.HostConfigWatch.HostAddList">
            <summary>
            变化后要追加的主机。
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.HostConfigWatch.HostRemoveList">
            <summary>
            变化后要移除的主机。
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.MemcachedClient">
            <summary>
            Memcached client main class.
            Use the static methods Setup and GetInstance to setup and get an instance of the client for use.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Set(System.String,System.Object)">
            <summary>
            This method corresponds to the "set" command in the memcached protocol. 
            It will unconditionally set the given key to the given value.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully set.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Get(System.String)">
            <summary>
            This method corresponds to the "get" command in the memcached protocol.
            It will return the value for the given key. It will return null if the key did not exist,
            or if it was unable to retrieve the value.
            If given an array of keys, it will return a same-sized array of objects with the corresponding
            values.
            Use the overload to specify a custom hash to override server selection.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Delete(System.String)">
            <summary>
            This method corresponds to the "delete" command in the memcache protocol.
            It will immediately delete the given key and corresponding value.
            Use the overloads to specify an amount of time the item should be in the delete queue on the server,
            or to specify a custom hash to override server selection.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.FlushAll">
            <summary>
            This method corresponds to the "flush_all" command in the memcached protocol.
            When this method is called, it will send the flush command to all servers, thereby deleting
            all items on all servers.
            Use the overloads to set a delay for the flushing. If the parameter staggered is set to true,
            the client will increase the delay for each server, i.e. the first will flush after delay*0, 
            the second after delay*1, the third after delay*2, etc. If set to false, all servers will flush 
            after the same delay.
            It returns true if the command was successful on all servers.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Stats">
            <summary>
            This method corresponds to the "stats" command in the memcached protocol.
            It will send the stats command to all servers, and it will return a Dictionary for each server
            containing the results of the command.
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.MemcachedClient.CasResult">
            <summary>
            This method corresponds to the "replace" command in the memcached protocol. 
            It will set the given key to the given value only if the key already exists.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully replaced.
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.MSocket">
            <summary>
            底层Cache Socket
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MSocket.ReturnPool">
            <summary>
            回归 Socket池
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MSocket.Close">
            <summary>
            This method closes the underlying stream and socket.
            关闭Socket并释放相关资源。
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MSocket.Write(System.String)">
            <summary>
            Writes a string to the socket encoded in UTF8 format.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MSocket.Write(System.Byte[])">
            <summary>
            Writes an array of bytes to the socket and flushes the stream.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MSocket.ReadLine">
            <summary>
            Reads from the socket until the sequence '\r\n' is encountered, 
            and returns everything up to but not including that sequence as a UTF8-encoded string
            返回Null即没有数据了！
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MSocket.ReadLineBytes">
            <summary>
            读一行的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Cache.MSocket.ReadBytes(System.Int32)">
            <summary>
            读一行的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Cache.MSocket.ReadResponse">
            <summary>
            Reads a response line from the socket, checks for general memcached errors, and returns the line.
            If an error is encountered, this method will throw an exception.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MSocket.Read(System.Byte[])">
            <summary>
            Fills the given byte array with data from the socket.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MSocket.SkipToEndOfLine">
            <summary>
            Reads from the socket until the sequence '\r\n' is encountered.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MSocket.Reset">
            <summary>
            Resets this PooledSocket by making sure the incoming buffer of the socket is empty.
            If there was any leftover data, this method return true.
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.MSocket.HostNode">
            <summary>
            挂载的Socket池。
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.MSocket.IsAlive">
            <summary>
            Checks if the underlying socket and stream is connected and available.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.Serializer.Serialize(System.Object,CYQ.Data.Cache.SerializedType@,System.UInt32)">
            <summary>
            序列化
            </summary>
            <param name="value">值</param>
            <param name="type">返回序列化类型</param>
            <param name="compressionThreshold">指定超过长度时启用压缩功能</param>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.Cache.HostServer">
            <summary>
            The ServerPool encapsulates a collection of memcached servers and the associated SocketPool objects.
            This class contains the server-selection logic, and contains methods for executing a block of code on 
            a socket from the server corresponding to a given key.
            管理多个主机实例的服务
            </summary>
            <summary>
            处理一致性hash
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.HostServer.hostServerBak">
            <summary>
            备份的主机池，如果某主机挂了，在配置了备份的情况下，会由备份提供服务。
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.HostServer.watch">
            <summary>
            Internal constructor. This method takes the array of hosts and sets up an internal list of socketpools.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.HostServer.watch_OnConfigChangedEvent">
            <summary>
            缓存配置文件修改时
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.HostServer.Execute``1(System.UInt32,``0,CYQ.Data.Cache.UseSocket{``0})">
            <summary>
            This method executes the given delegate on a socket from the server that corresponds to the given hash.
            If anything causes an error, the given defaultValue will be returned instead.
            This method takes care of disposing the socket properly once the delegate has executed.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.HostServer.ExecuteAll(CYQ.Data.Cache.UseSocket)">
            <summary>
            This method executes the given delegate on all servers.
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.HostServer.hashHostDic">
            <summary>
            一致性hash的主机分布列表
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.HostServer.hashKeys">
            <summary>
            创建用于查询（已排序）的hashkey。
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.HostServer.GetHost(System.UInt32)">
            <summary>
            Given an item key hash, this method returns the socketpool which is closest on the server key continuum.
            获取一台用于服务的主机实例。
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.HostServer.HostList">
            <summary>
            主机列表。
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.HostNode">
            <summary>
            The SocketPool encapsulates the list of PooledSockets against one specific host, and contains methods for 
            acquiring or returning PooledSockets.
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.HostNode.Password">
            <summary>
            扩展属性：如果链接后需要验证密码（如Redis可设置密码）
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.HostNode.Error">
            <summary>
            最后的错误信息。
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.HostNode.IsEndPointDead">
            <summary>
            主机节点是不是挂了。
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.HostNode.HostNodeBak">
            <summary>
            备份的Socket池，如果某主机挂了，在配置了备份的情况下，会由备份Socket池提供服务。
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.HostNode.socketDeadTime">
            <summary>
            Socket的挂科时间。
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.HostNode.deadEndPointSecondsUntilRetry">
            <summary>
            If the host stops responding, we mark it as dead for this amount of seconds, 
            and we double this for each consecutive failed retry. If the host comes alive
            again, we reset this to 1 again.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.HostNode.Acquire">
            <summary>
            Gets a socket from the pool.
            If there are no free sockets, a new one will be created. If something goes
            wrong while creating the new socket, this pool's endpoint will be marked as dead
            and all subsequent calls to this method will return null until the retry interval
            has passed.
            这个方法扩展（备份链接池）
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.HostNode.Return(CYQ.Data.Cache.MSocket)">
            <summary>
            Returns a socket to the pool.
            If the socket is dead, it will be destroyed.
            If there are more than MaxPoolSize sockets in the pool, it will be destroyed.
            If there are less than MinPoolSize sockets in the pool, it will always be put back.
            If there are something inbetween those values, the age of the socket is checked. 
            If it is older than the SocketRecycleAge, it is destroyed, otherwise it will be 
            put back in the pool.
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.HostNode.Poolsize">
            <summary>
            当前 Socket 池的可用数量。
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.RedisCache">
            <summary>
            Redis分布式缓存类
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.RedisClient">
            <summary>
            Redis client main class.
            Use the static methods Setup and GetInstance to setup and get an instance of the client for use.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.RedisClient.Stats">
            <summary>
            This method corresponds to the "stats" command in the memcached protocol.
            It will send the stats command to all servers, and it will return a Dictionary for each server
            containing the results of the command.
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.RedisCommand">
            <summary>
            RedisCommand
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.RedisCommand.AddValue(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="data1"></param>
            <param name="data2"></param>
        </member>
        <member name="T:CYQ.Data.ConnBean">
            <summary>
            数据库对象基础实例
            </summary>
        </member>
        <member name="F:CYQ.Data.ConnBean.ConnName">
            <summary>
            对应的ConnectionString的Name
            或者最原始传进来的链接
            </summary>
        </member>
        <member name="F:CYQ.Data.ConnBean.IsOK">
            <summary>
            链接的状态是否正常。
            </summary>
        </member>
        <member name="F:CYQ.Data.ConnBean.IsSlave">
            <summary>
            是否从库
            </summary>
        </member>
        <member name="F:CYQ.Data.ConnBean.IsBackup">
            <summary>
            是否备用库
            </summary>
        </member>
        <member name="F:CYQ.Data.ConnBean.ErrorMsg">
            <summary>
            链接错误时的异常消息。
            </summary>
        </member>
        <member name="F:CYQ.Data.ConnBean.ConnString">
            <summary>
            经过格式化后的数据库链接字符串
            </summary>
        </member>
        <member name="F:CYQ.Data.ConnBean.ConnDataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:CYQ.Data.ConnBean.Version">
            <summary>
            数据库版本信息
            </summary>
        </member>
        <member name="F:CYQ.Data.ConnBean.connBeanDicCache">
            <summary>
            所有链接的对象集合
            </summary>
        </member>
        <member name="M:CYQ.Data.ConnBean.Create(System.String)">
            <summary>
            创建一个实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.ConnBean.RemoveConnProvider(CYQ.Data.DataBaseType,System.String)">
            <summary>
            去掉 链接中的 provider=xxxx;
            </summary>
        </member>
        <member name="T:CYQ.Data.ConnConfigWatch">
            <summary>
            链接配置管理
            </summary>
        </member>
        <member name="F:CYQ.Data.ConnConfigWatch.watchList">
            <summary>
            监控列表。
            </summary>
        </member>
        <member name="M:CYQ.Data.ConnConfigWatch.Start(System.String,System.String)">
            <summary>
            开启加载一个配置。
            </summary>
            <param name="connName">Conn的名称</param>
            <param name="connPath">Conn指向的路径</param>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.ConnObject">
            <summary>
            一个数据库对像实例：集合了主从备三种
            </summary>
        </member>
        <member name="M:CYQ.Data.ConnObject.InterChange">
            <summary>
            主备互换位置。
            </summary>
        </member>
        <member name="M:CYQ.Data.ConnObject.SetFocusOnMaster">
            <summary>
            设置临时仅允许访问主库（默认10秒）
            </summary>
        </member>
        <member name="F:CYQ.Data.ConnObject.connDicCache">
            <summary>
            所有链接的对象集合
            </summary>
        </member>
        <member name="M:CYQ.Data.ConnObject.CheckConnIsOk(System.Object)">
            <summary>
            定时检测异常的链接是否恢复。
            </summary>
            <param name="threadID"></param>
        </member>
        <member name="T:CYQ.Data.DataBaseType">
            <summary>
            操作的数据库类型
            </summary>
        </member>
        <member name="F:CYQ.Data.DataBaseType.MsSql">
            <summary>
            MSSQL[2000/2005/2008/2012/...]
            </summary>
        </member>
        <member name="F:CYQ.Data.DataBaseType.PostgreSQL">
            <summary>
            PostgreSQL 
            </summary>
        </member>
        <member name="F:CYQ.Data.DataBaseType.Txt">
            <summary>
            Txt DataBase
            </summary>
        </member>
        <member name="F:CYQ.Data.DataBaseType.Xml">
            <summary>
            Xml DataBase
            </summary>
        </member>
        <member name="T:CYQ.Data.ParaType">
            <summary>
            特殊参数类型[MProc SetCustom方法所使用的参数]
            </summary>
        </member>
        <member name="F:CYQ.Data.ParaType.Cursor">
            <summary>
            Oracle 游标类型
            </summary>
        </member>
        <member name="F:CYQ.Data.ParaType.OutPut">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="F:CYQ.Data.ParaType.InputOutput">
            <summary>
            输入输出类型
            </summary>
        </member>
        <member name="F:CYQ.Data.ParaType.ReturnValue">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:CYQ.Data.ParaType.CLOB">
            <summary>
            Oracle CLOB类型
            </summary>
        </member>
        <member name="F:CYQ.Data.ParaType.NCLOB">
            <summary>
             Oracle NCLOB类型
            </summary>
        </member>
        <member name="F:CYQ.Data.ParaType.Structured">
            <summary>
             MSSQL 用户定义表类型
            </summary>
        </member>
        <member name="T:CYQ.Data.DataGroupType">
            <summary>
            数据类型分组
            字母型返回0；数字型返回1；日期型返回2；bool返回3；guid返回4；其它返回999
            </summary>
        </member>
        <member name="F:CYQ.Data.DataGroupType.None">
            <summary>
            未定义
            </summary>
        </member>
        <member name="F:CYQ.Data.DataGroupType.Text">
            <summary>
            文本类型0
            </summary>
        </member>
        <member name="F:CYQ.Data.DataGroupType.Number">
            <summary>
            数字型返回1
            </summary>
        </member>
        <member name="F:CYQ.Data.DataGroupType.Date">
            <summary>
            日期型返回2
            </summary>
        </member>
        <member name="F:CYQ.Data.DataGroupType.Bool">
            <summary>
            bool返回3
            </summary>
        </member>
        <member name="F:CYQ.Data.DataGroupType.Guid">
            <summary>
            guid返回4
            </summary>
        </member>
        <member name="F:CYQ.Data.DataGroupType.Object">
            <summary>
            其它返回999
            </summary>
        </member>
        <member name="T:CYQ.Data.DBResetResult">
            <summary>
            重置数据库的结果
            </summary>
        </member>
        <member name="F:CYQ.Data.DBResetResult.Yes">
            <summary>
             成功切换 数据库链接
            </summary>
        </member>
        <member name="F:CYQ.Data.DBResetResult.No_SaveDbName">
            <summary>
            未切换 - 相同数据库名。
            </summary>
        </member>
        <member name="F:CYQ.Data.DBResetResult.No_Transationing">
            <summary>
            未切换 - 事务中。
            </summary>
        </member>
        <member name="F:CYQ.Data.DBResetResult.No_DBNoExists">
            <summary>
            未切换 - 新数据库名不存在。
            </summary>
        </member>
        <member name="T:CYQ.Data.AllowConnLevel">
            <summary>
            测试链接的级别
            </summary>
        </member>
        <member name="P:CYQ.Data.NoSqlConnection.DataSource">
            <summary>
            返回文件夹所在的目录
            </summary>
        </member>
        <member name="P:CYQ.Data.NoSqlConnection.Database">
            <summary>
            返回 目录名 即数据库名
            </summary>
        </member>
        <member name="M:CYQ.Data.NoSqlCommand.FormatParas(System.String)">
            <summary>
            处理参数化替换
            </summary>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.InsertOp">
            <summary>
            MAction Insert Options
            <para>MAction的Insert方法的返回值选项</para>
            </summary>
        </member>
        <member name="F:CYQ.Data.InsertOp.None">
            <summary>
            only insert,no return autoIncrement id
            <para>使用此项：插入数据后[MSSQL会返回id,其它数据库则不会返回id]</para>
            </summary>
        </member>
        <member name="F:CYQ.Data.InsertOp.ID">
            <summary>
            insert and return autoincrement id (default option)
            <para>使用此项：插入数据后会返回id[默认选项]。</para>
            </summary>
        </member>
        <member name="F:CYQ.Data.InsertOp.Fill">
            <summary>
            insert and select top 1 data to fill row
            <para>使用此项：插入数据后,会根据返回id进行查询后填充数据行。</para>
            </summary>
        </member>
        <member name="T:CYQ.Data.LocalEnvironment">
            <summary>
            用于收集本机的环境信息
            相对固定的属性
            </summary>
            <summary>
            变化的部分属性
            </summary>
        </member>
        <member name="P:CYQ.Data.LocalEnvironment.HostName">
            <summary>
            电脑的名称
            </summary>
        </member>
        <member name="P:CYQ.Data.LocalEnvironment.UserName">
            <summary>
            程序运行的当前用户名。
            </summary>
        </member>
        <member name="P:CYQ.Data.LocalEnvironment.ProcessorCount">
            <summary>
            CPU的核数
            </summary>
        </member>
        <member name="P:CYQ.Data.LocalEnvironment.HostIP">
            <summary>
            本机内网IP，若无，则返回主机名
            </summary>
        </member>
        <member name="P:CYQ.Data.LocalEnvironment.ProcessWorkingSet">
            <summary>
            当前进程占用的内存（M）
            </summary>
        </member>
        <member name="M:CYQ.Data.Error.Throw(System.String)">
            <summary>
            抛出异常
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:CYQ.Data.LogType">
            <summary>
            LogType
            <para>日志类型</para>
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.DataBase">
            <summary>
            DataBase
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.Cache">
            <summary>
            Cache
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.Aries">
            <summary>
            Aries Dev Framework
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.Taurus">
            <summary>
            Taurus Dev Framework
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.Gemini">
            <summary>
            Gemini Workflow Dev Framework
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.MicroService">
            <summary>
            Taurus.MicroService
            </summary>
        </member>
        <member name="T:CYQ.Data.LogWorker">
            <summary>
            内部定时日志工作
            </summary>
        </member>
        <member name="F:CYQ.Data.LogWorker._LogQueue">
            <summary>
            待处理的工作队列
            </summary>
        </member>
        <member name="F:CYQ.Data.LogWorker.hashObj">
            <summary>
            存档Hash，5分钟内存在相同的错误，则直接忽略
            </summary>
        </member>
        <member name="T:CYQ.Data.SysLogs">
            <summary>
            A class for you to Write log to database
            <para>日志记录到数据库（需要配置LogConn链接后方有效）</para>
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.SimpleOrmBase">
            <summary>
            简单ORM基类（纯数据交互功能）
            </summary>
        </member>
        <member name="F:CYQ.Data.Orm.SimpleOrmBase.IsUseAop">
            <summary>
            是否启用了AOP拦截设置字段值同步(默认false)
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.SetPara(System.Object,System.Object)">
            <summary>
            设置参数化
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.SetAopState(CYQ.Data.Aop.AopOp)">
            <summary>
            设置Aop状态
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.SetInit(System.Object)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.SetInit(System.Object,System.String)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
            <param name="tableName">表名,如:Users</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.SetInit(System.Object,System.String,System.String)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
            <param name="tableName">表名,如:Users</param>
            <param name="conn">数据链接,单数据库时可写Null,或写默认链接配置项:"Conn",或直接数据库链接字符串</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.SetDelayInit(System.Object,System.String,System.String)">
            <summary>
            将原有的初始化改造成延时加载。
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Insert">
            <summary>
            插入数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Insert(CYQ.Data.InsertOp)">
            <summary>
             插入数据
            </summary>
            <param name="option">插入选项</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Insert(CYQ.Data.InsertOp,System.Boolean)">
            <summary>
             插入数据
            </summary>
            <param name="insertID">插入主键</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Insert(System.Boolean,CYQ.Data.InsertOp,System.Boolean)">
            <summary>
             插入数据
            </summary>
            <param name="autoSetValue">自动从控制获取值</param>
            <param name="option">插入选项</param>
            <param name="insertID">插入主键</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Update">
            <summary>
             更新数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Update(System.Object,System.String[])">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <param name="onlyUpdateColumns">指定仅更新的列名，多个用逗号分隔</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Update(System.Object,System.Boolean,System.String[])">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <param name="autoSetValue">是否自动获取值[自动从控件获取值,需要先调用SetAutoPrefix或SetAutoParentControl方法设置控件前缀]</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Delete">
            <summary>
             删除数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Delete(System.Object)">
            <summary>
             删除数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Delete(System.Object,System.Boolean)">
            <param name="isIgnoreDeleteField">当表存在删除字段，如：IsDeleted标识时，默认会转成更新，此标识可以强制设置为删除</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Fill">
            <summary>
            查询1条数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Fill(System.Object)">
            <summary>
            查询1条数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Get``1(System.Object)">
            <summary>
            查询一条数据并返回一个新的实例
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Select``1">
            <summary>
            列表查询
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Select``1(System.String)">
            <summary>
            列表查询
            </summary>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Select``1(System.Int32,System.String)">
            <summary>
            列表查询
            </summary>
            <param name="topN">查询几条</param>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Select``1(System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            带分布功能的选择[多条件查询,选择所有时只需把PageIndex/PageSize设置为0]
            </summary>
            <param name="pageIndex">第几页</param>
            <param name="pageSize">每页数量[为0时默认选择所有]</param>
            <param name="where"> 查询条件[可附带 order by 语句]</param>
            <param name="count">返回的记录总数</param>
            <param name="selectColumns">指定返回的列</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.GetCount">
            <summary>
            获取记录总数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.GetCount(System.Object)">
            <summary>
            获取记录总数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Exists(System.Object)">
            <summary>
            查询是否存在指定的条件的数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.LoadFrom(System.Object)">
            <summary>
            批量加载值（可从Json、实体对象、MDataRow、泛型字段等批量加载值）
            </summary>
            <param name="jsonOrEntity">json字符串或实体对象</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.ClearPara">
            <summary>
            清除(SetPara设置的)自定义参数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Clear">
            <summary>
            清空所有值
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.SimpleOrmBase.BaseInfo">
            <summary>
            获取 基类 ORM 的相关信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.SimpleOrmBase.IsWriteLogOnError">
            <summary>
            标识是否允许写日志(默认true)
            </summary>
        </member>
        <member name="M:CYQ.Data.SysLogs.Write">
            <summary>
            将日志写入到队列中待线程执行。
            </summary>
        </member>
        <member name="F:CYQ.Data.SysLogs.IsWriteToTxt">
            <summary>
            是否写到文本中
            </summary>
        </member>
        <member name="M:CYQ.Data.SysLogs.GetFormatterText">
            <summary>
            获取文本格式的日志内容
            </summary>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.SysLogs.ID">
            <summary>
            标识主键
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.HostName">
            <summary>
            请求的主机名称(系统默认读取主机名)
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.Host">
            <summary>
            请求的主机IP(系统默认读取主机内网IP，若无则返回主机名)
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.HttpMethod">
            <summary>
            请求方法
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.ClientIP">
            <summary>
            客户端请求IP
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.PageUrl">
            <summary>
            请求的地址
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.RefererUrl">
            <summary>
            请求的地址
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.Message">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.LengthAttribute">
            <summary>
            列长度
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.LengthAttribute.MaxSize">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.LengthAttribute.Scale">
            <summary>
            精度
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.KeyAttribute">
            <summary>
            主键自增是否允许Null
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.DefaultValueAttribute">
            <summary>
            默认值
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.DescriptionAttribute">
            <summary>
            表名或字段描述
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.ColumnNameAttribute">
            <summary>
            数据库：字段名称
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.TableNameAttribute">
            <summary>
            数据库：表名
            </summary>
        </member>
        <member name="T:CYQ.Data.JsonIgnoreAttribute">
            <summary>
            Json 转换忽略的字段
            </summary>
        </member>
        <member name="T:CYQ.Data.JsonEnumToStringAttribute">
            <summary>
            Json 枚举字段转字符串
            </summary>
        </member>
        <member name="T:CYQ.Data.JsonEnumToDescriptionAttribute">
            <summary>
            Json 枚举字段转属性描述
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.DBFast">
            <summary>
            快速操作操作类。
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.HasTransation(System.String)">
            <summary>
            当前 用户 是否开启了全局事务
            </summary>
            <returns></returns>
        </member>
        <member name="F:CYQ.Data.Orm.DBFast.TransationKeys">
            <summary>
            存档事务的标识
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.BeginTransation(System.String)">
            <summary>
            开启事务 (Web 状态下以（Session+线程ID）为单位，其它状态下仅以线程ID为单位)
            如果已存在事务（则返回false）
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.EndTransation(System.String)">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.RollBack(System.String)">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Find``1(System.Object,System.String[])">
            <summary>
            查找单条记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="where">条件</param>
            <param name="columns">指定查询的列（可选）</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Select``1(System.String,System.String[])">
            <summary>
            列表查询
            </summary>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Select``1(System.Int32,System.String,System.String[])">
            <summary>
            列表查询
            </summary>
            <param name="topN">查询几条</param>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Select``1(System.Int32,System.Int32,System.Object,System.Int32@,System.String[])">
            <summary>
            查找多条记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="pageIndex">第N页</param>
            <param name="pageSize">每页N条</param>
            <param name="where">条件</param>
            <param name="count">返回记录总数</param>
            <param name="columns">指定查询的列（可选）</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Delete``1(System.Object)">
            <summary>
            删除记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="where">条件</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Insert``1(``0,CYQ.Data.InsertOp,System.Boolean)">
            <summary>
            添加一条记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="t">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Update``1(``0,System.Object,System.String[])">
            <summary>
            更新记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="t">实体对象</param>
            <param name="where">条件</param>
            <param name="updateColumns">指定要更新列</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Exists``1(System.Object)">
            <summary>
            是否存在指定的条件
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.OrmBase">
            <summary>
            ORM扩展基类
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetAopState(CYQ.Data.Aop.AopOp)">
            <summary>
            设置Aop状态
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetInit(System.Object)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetInit(System.Object,System.String)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
            <param name="tableName">表名,如:Users</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetInit(System.Object,System.String,System.String)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
            <param name="tableName">表名,如:Users</param>
            <param name="conn">数据链接,单数据库时可写Null,或写默认链接配置项:"Conn",或直接数据库链接字符串</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Set(System.Object,System.Object)">
            <summary>
            设置值,例如:[action.Set(TableName.id,10);]
            </summary>
            <param name="key">字段名称,可用枚举如:[TableName.id]</param>
            <param name="value">要设置给字段的值</param>
            <example><code>
            set示例：action.Set(Users.UserName,"路过秋天");
            get示例：int id=action.Get&lt;int&gt;(Users.id);
            </code></example>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Insert">
            <summary>
            插入数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Insert(CYQ.Data.InsertOp)">
            <summary>
             插入数据
            </summary>
            <param name="option">插入选项</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Insert(System.Boolean)">
            <summary>
             插入数据
            </summary>
            <param name="autoSetValue">自动从控制获取值</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Insert(System.Boolean,CYQ.Data.InsertOp)">
            <summary>
             插入数据
            </summary>
            <param name="autoSetValue">自动从控制获取值</param>
            <param name="option">插入选项</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Update">
            <summary>
             更新数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Update(System.Object)">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Update(System.Object,System.Boolean)">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <param name="autoSetValue">是否自动获取值[自动从控件获取值,需要先调用SetAutoPrefix或SetAutoParentControl方法设置控件前缀]</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Delete">
            <summary>
             删除数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Delete(System.Object)">
            <summary>
             删除数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Fill">
            <summary>
            查询1条数据（自动取值）
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Fill(System.Object)">
            <summary>
            查询1条数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Get(System.Object)">
            <summary>
            查询1条数据并返回新的一行
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Select">
            <summary>
            列表查询
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Select(System.String)">
            <summary>
            列表查询
            </summary>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Select(System.Int32,System.String)">
            <summary>
            列表查询
            </summary>
            <param name="topN">查询几条</param>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Select(System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            带分布功能的选择[多条件查询,选择所有时只需把PageIndex/PageSize设置为0]
            </summary>
            <param name="pageIndex">第几页</param>
            <param name="pageSize">每页数量[为0时默认选择所有]</param>
            <param name="where"> 查询条件[可附带 order by 语句]</param>
            <param name="count">返回的记录总数</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.GetCount">
            <summary>
            获取记录总数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.GetCount(System.Object)">
            <summary>
            获取记录总数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Exists(System.Object)">
            <summary>
            查询是否存在指定的条件的数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.LoadFrom(System.Object)">
            <summary>
            批量加载值（可从Json、实体对象、MDataRow、泛型字段等批量加载值）
            </summary>
            <param name="jsonOrEntity">json字符串或实体对象</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetSelectColumns(System.Object[])">
            <summary>
            本方法可以在单表使用时查询指定的列[设置后可使用Fill与Select方法]
            提示：分页查询时，排序条件的列必须指定选择。
            </summary>
            <param name="columnNames">可设置多个列名[调用Fill或Select后,本参数将被清除]</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetPara(System.Object,System.Object,System.Data.DbType)">
            <summary>
            参数化传参[当Where条件为参数化(如：name=@name)语句时使用]
            </summary>
            <param name="paraName">参数名称</param>
            <param name="value">参数值</param>
            <param name="dbType">参数类型</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetPara(System.Object,System.Object)">
            <summary>
            设置参数化
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.ClearPara">
            <summary>
            清除(SetPara设置的)自定义参数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Clear">
            <summary>
            清空所有值
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetExpression(System.String)">
            <summary>
            更新操作的自定义表达式设置。
            </summary>
            <param name="updateExpression">例如a字段值自加1："a=a+1"</param>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.BaseInfo">
            <summary>
            获取 基类 ORM 的相关信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.AllowInsertID">
            <summary>
            是否允许插入自增id
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.UI">
            <summary>
            UI操作
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.OrmBaseInfo">
            <summary>
            基类的基础信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBaseInfo.RecordsAffected">
            <summary>
            获取 更新、删除、插入，查询操作后，受影响的行数
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBaseInfo.IsTransation">
            <summary>
            是否事务进行中
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBaseInfo.TableName">
            <summary>
            获取 数据库的 表名
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBaseInfo.DataBaseName">
            <summary>
            获取 数据库名
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBaseInfo.DataBaseVersion">
            <summary>
            获取 数据库 版本信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBaseInfo.MDataColumn">
            <summary>
            获取 数据库 的列结构
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBaseInfo.ConnName">
            <summary>
            获取 数据库 的列结构
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBaseInfo.ConnString">
            <summary>
            获取 数据库 的列结构
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBaseInfo.DebugInfo">
            <summary>
            获取 数据库 操作后的调试信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBaseInfo.DataBaseType">
            <summary>
            获取 数据库 类型
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.SimpleOrmBase`1">
            <summary>
            简单ORM基类（纯数据交互功能）
            </summary>
        </member>
        <member name="T:CYQ.Data.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:CYQ.Data.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:CYQ.Data.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:CYQ.Data.Properties.Resources.xhtml_lat1">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:CYQ.Data.Properties.Resources.xhtml_special">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:CYQ.Data.Properties.Resources.xhtml_symbol">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:CYQ.Data.Properties.Resources.xhtml1_transitional">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.TableSchema">
            <summary>
            从实体转成列
            </summary>
            <summary>
            从DataTable 架构转列
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.TableSchema._ColumnCache">
            <summary>
            全局缓存实体类的表结构（仅会对Type读取的结构）
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.TableSchema.GetSchemaKey(System.String,System.String)">
            <summary>
            缓存表架构Key
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.TableSchema.FixTableSchemaType(System.Data.DataTable,System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
            DbDataReader的GetSchema拿到的DataType、Size、Scale很不靠谱
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.CrossDB">
            <summary>
            处理跨库访问
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.CrossDB.GetConn(System.String,System.String@,System.String,System.String@)">
            <summary>
            获得最优（可能会切换数据库）链接的配置或语句。
            </summary>
            <param name="nameOrSql">表名、视图名、存储过程名</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.CrossDB.GetDBName(System.String)">
            <summary>
            获得数据库名称。
            </summary>
            <param name="formatName"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.CrossDB.GetTableInfoByName(System.String,System.String)">
            <summary>
            获得数据库表相关信息
            </summary>
            <param name="conn">指定时优先寻找。</param>
            <param name="name">表名</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.CrossDB.Exists(System.String,System.String,System.String)">
            <summary>
            是否存在指定的表名、视图名、存储过程名
            </summary>
            <param name="newName"></param>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="F:CYQ.Data.SQL.DBSchema._DBScheams">
            <summary>
            首次初始化的数据库
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.DBSchema._DBScheamsTemp">
            <summary>
            后续代码初始化的数据库
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.DBSchema.GetSchema(System.String,System.Boolean)">
            <summary>
            获取(并缓存)数据库的“表、视图、存储过程”名称列表。
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.DBSchema.InitDBSchemasForCache(System.Object)">
            <summary>
            预先把结构缓存起来。
            </summary>
            <param name="para"></param>
        </member>
        <member name="T:CYQ.Data.SQL.SqlCreateForSchema">
            <summary>
            SQL 结构语句
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreateForSchema.GetTableDescriptionSql(System.String,CYQ.Data.Table.MCellStruct,CYQ.Data.DataBaseType,System.Boolean)">
            <summary>
            获取单个列的表描述语句
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreateForSchema.CreateTableDescriptionSql(System.String,CYQ.Data.Table.MDataColumn,CYQ.Data.DataBaseType)">
            <summary>
            获取指定的表架构生成的SQL(Create Table)的说明语句
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreateForSchema.CreateTableSql(System.String,CYQ.Data.Table.MDataColumn,CYQ.Data.DataBaseType,System.String)">
            <summary>
            获取指定的表架构生成的SQL(Create Table)语句
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreateForSchema.AlterTableSql(System.String,CYQ.Data.Table.MDataColumn,System.String)">
            <summary>
            获取指定的表架构生成的SQL(Alter Table)语句
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.SqlSyntax">
            <summary>
            SQL语法解析规则
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlSyntax.Analyze(System.String)">
            <summary>
            分析语法
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataRow">
            <summary>
            一行记录
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.GetItemValue(System.String)">
            <summary>
            此方法被Emit所调用
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.GetItemValue(System.Int32)">
            <summary>
            此方法被Emit所调用
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.GetItemValues">
            <summary>
            返回数组值
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Get``1(System.Object)">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToTable">
            <summary>
            将行的数据转成两列（ColumnName、Value）的表
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToTable(System.Boolean)">
            <summary>
            将行的数据转成两列（ColumnName、Value、State）的表
            </summary>
            <param name="onlyData">仅数据（不含列头结构）</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Clear">
            <summary>
            将行的数据行的值全重置为Null
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.GetState">
            <summary>
            获取行的当前状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.GetState(System.Boolean)">
            <summary>
            获取行的当前状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Sets(System.Object,System.Object[])">
            <summary>
            为行连续设置值多个值
            </summary>
            <param name="startKey">起始行索引||起始列名</param>
            <param name="values">多个值</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Set(System.Object,System.Object)">
            <summary>
            为行设置值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Set(System.Object,System.Object,System.Int32)">
            <summary>
            为行设置值
            </summary>
            <param name="key">字段名</param>
            <param name="value">值</param>
            <param name="state">手工设置状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetState(System.Int32)">
            <summary>
            将行的数据行的状态全部重置
            </summary>
            <param name="state">状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetState(System.Int32,CYQ.Data.Table.BreakOp)">
            <summary>
            将行的数据行的状态全部重置
            </summary>
            <param name="state">状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]</param>
            <param name="op">状态设置选项</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetState(System.Int32,CYQ.Data.Table.BreakOp,System.String)">
            <param name="columns"><para>批量指定某些列</para></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetState">
            <summary>
            无参时默认自-1
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Clone">
            <summary>
            复制一行
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.CreateFrom(System.Object)">
            <summary>
            从实体、Json、Xml、IEnumerable接口实现的类、MDataRow
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.CreateFrom(System.Object,System.Type,CYQ.Data.Table.BreakOp,CYQ.Data.Tool.EscapeOp)">
            <summary>
            从实体、Json、Xml、IEnumerable接口实现的类、MDataRow
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToJson">
            <summary>
            输出行的数据Json
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToJson(CYQ.Data.Table.RowOp)">
            <summary>
            输出行的数据Json
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToJson(CYQ.Data.Table.RowOp,System.Boolean,CYQ.Data.Tool.EscapeOp)">
            <summary>
            输出Json
            </summary>
            <param name="op">过滤条件</param>
            <param name="escapeOp">转义选项</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToEntity``1(System.Boolean)">
            <summary>
            转成实体
            </summary>
            <typeparam name="T">实体名称</typeparam>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetToAll(System.Object[])">
            <summary>
            将值批量赋给UI
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetToAll(System.String,System.Object[])">
            <summary>
            将值批量赋给UI
            </summary>
            <param name="autoPrefix">自动前缀，多个可用逗号分隔</param>
            <param name="parentControls">页面控件</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom">
            <summary>
            从Web Post表单里取值。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.Boolean,System.Object[])">
            <summary>
            从Web Post表单里取值 或 从Winform、WPF的表单控件里取值。
            <param name="isWeb">True为Web应用，反之为Win应用</param>
            <param name="prefixOrParentControl">Web时设置前缀，Win时设置父容器控件</param>
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(CYQ.Data.Table.MDataRow)">
            <summary>
            从别的行加载值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(CYQ.Data.Table.MDataRow,CYQ.Data.Table.RowOp,System.Boolean)">
            <summary>
            从别的行加载值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(CYQ.Data.Table.MDataRow,CYQ.Data.Table.RowOp,System.Boolean,System.Boolean)">
            <summary>
            从别的行加载值
            </summary>
            <param name="row">要加载数据的行</param>
            <param name="rowOp">行选项[从其它行加载的条件]</param>
            <param name="isAllowAppendColumn">如果row带有新列，是否加列</param>
            <param name="isWithValueState">是否同时加载值的状态[默认值为：true]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.Object[])">
            <summary>
            从数组里加载值
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.String,CYQ.Data.Tool.EscapeOp)">
            <summary>
            从json里加载值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.String,CYQ.Data.Tool.EscapeOp,CYQ.Data.Table.BreakOp)">
            <summary>
            从json里加载值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.Collections.IEnumerable)">
            <summary>
            从泛型字典集合里加载
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.Object)">
            <summary>
            将实体转成数据行。
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.Object,CYQ.Data.Table.BreakOp)">
            <summary>
            将实体转成数据行。
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.Object,CYQ.Data.Table.BreakOp,System.Int32)">
            <summary>
            将实体转成数据行。
            </summary>
            <param name="entity">实体对象</param>
            <param name="op">跳过设置的选项</param>
            <param name="initState">初始值：0无法插入和更新；1可插入；2可插入可更新(默认值)</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetToEntity(System.Object)">
            <summary>
            将行中的数据值赋给实体对象
            </summary>
            <param name="obj">实体对象</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetToEntity(System.Object@,CYQ.Data.Table.MDataRow)">
            <summary>
            将指定行的数据赋给实体对象。
            </summary>
            <param name="obj"></param>
            <param name="row"></param>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.Columns">
            <summary>
            获取列头
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.Conn">
            <summary>
            所依属的数据库配置项名称[当MAction从带有架构的行加载时,此链接若存在,优先成为默认的数据库链接]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.TableName">
            <summary>
            原始表名[未经过多数据库兼容处理]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.DynamicData">
            <summary>
            动态存储数据
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.Item(System.Object)">
            <summary>
            输入枚举型数据
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.Table">
            <summary>
            获取该行拥有其架构的 MDataTable。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.ItemArray">
            <summary>
            通过一个数组来获取或设置此行的所有值。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.RowError">
            <summary>
            获取或设置行的自定义错误说明。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.PrimaryCell">
            <summary>
            获取第一个关键主键列
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.JointPrimaryCell">
            <summary>
            获取联合主键列表（若有多个主键）
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataRowCollection">
            <summary>
            实现Winform DataGridView 的添加编辑和删除操作功能。
            </summary>
            <summary>
            行集合
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRowCollection.op_Implicit(System.Data.DataRowCollection)~CYQ.Data.Table.MDataRowCollection">
            <summary>
            隐式转换列头
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRowCollection.Add(System.Object[])">
            <summary>
            创建使用指定值的行，并将其添加到 MDataRowCollection 中
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRowCollection.Add(CYQ.Data.Table.MDataRow,System.Boolean)">
            <summary>
            添加行[默认重置状态为true]
            </summary>
            <param name="item">行</param>
            <param name="resetState">重置状态,[默认true]，重置后的行数据不参与MDataTable的批量更新操作,状态在重新赋值时改变。</param>
        </member>
        <member name="P:CYQ.Data.Table.MDataRowCollection.Table">
            <summary>
            获取该行拥有其架构的 MDataTable。
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataTable">
            <summary>
            表格
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Join(CYQ.Data.Table.MDataTable,System.String[])">
            <summary>
            两表LeftJoin关联
            </summary>
            <param name="dt">关联表</param>
            <param name="appendColumns">追加显示的列，没有指定则追加关联表的所有列</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Join(System.Object,System.String,System.String[])">
            <summary>
            两表LeftJoin关联
            </summary>
            <param name="tableName">关联表名</param>
            <param name="joinOnName">关联的字段名，设置Null则自动取表主键为关联名</param>
            <param name="appendColumns">追加显示的列，没有指定则追加关联表的所有列</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.op_Implicit(System.Data.Common.DbDataReader)~CYQ.Data.Table.MDataTable">
            <summary>
            从DataReader隐式转换成MDataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.op_Implicit(System.Data.DataTable)~CYQ.Data.Table.MDataTable">
            <summary>
            从DataTable隐式转换成MDataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.op_Implicit(System.Collections.Generic.List{CYQ.Data.Table.MDataRow})~CYQ.Data.Table.MDataTable">
            <summary>
            从行集合隐式转换成MDataTable
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.op_Implicit(CYQ.Data.Table.MDataRow)~CYQ.Data.Table.MDataTable">
            <summary>
            将一行数据装载成一个表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.op_Implicit(CYQ.Data.Table.MDataRowCollection)~CYQ.Data.Table.MDataTable">
            <summary>
            将一行数据装载成一个表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.NewRow">
            <summary>
            新建一行
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.NewRow(System.Boolean)">
            <summary>
            新建一行
            </summary>
            <param name="isAddToTable">是否顺带添加到表中</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.NewRow(System.Boolean,System.Int32)">
            <summary>
            新建一行
            </summary>
            <param name="index">插入的索引</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Select(System.Object)">
            <summary>
            使用本查询，得到克隆后的数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Select(System.Int32,System.Object)">
            <summary>
            使用本查询，得到克隆后的数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Select(System.Int32,System.Int32,System.Object,System.Object[])">
            <summary>
            使用本查询，得到克隆后的数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.FindRow(System.Object)">
            <summary>
            使用本查询，得到原数据的引用。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.FindAll(System.Object)">
            <summary>
            使用本查询，得到原数据的引用。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetIndex(System.Object)">
            <summary>
            统计满足条件的行所在的索引
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetCount(System.Object)">
            <summary>
            统计满足条件的行数
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Split(System.Object)">
            <summary>
            根据条件分拆成两个表【满足条件，和非满足条件的】，分出来的数据行和原始表仍是同一个引用
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.LoadRow(CYQ.Data.Table.MDataRow)">
            <summary>
            加载行(包括行架构)[提示，仅当表为空架构时有效]
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToDataTable">
            <summary>
            转换成DataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToDataTable(System.Boolean)">
            <summary>
            转换成DataTable
            </summary>
            <param name="isAddExtend">是否追加【值状态、记录总数】到扩展属性</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToXml">
            <summary>
            输出Xml文档
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToXml(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            输出Xml文档
            </summary>
            <param name="isConvertNameToLower">名称转小写</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.WriteXml(System.String,System.Boolean)">
            <summary>
            保存Xml
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToJson">
            <summary>
            输出Json
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToJson(System.Boolean,System.Boolean)">
            <param name="addHead">输出头部信息[带count、Success、ErrorMsg](默认true)</param>
            <param name="addSchema">首行输出表架构信息,反接收时可还原架构(默认false)</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToJson(System.Boolean,System.Boolean,CYQ.Data.Table.RowOp)">
            <param name="rowOp">过滤选项</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToJson(System.Boolean,System.Boolean,CYQ.Data.Table.RowOp,System.Boolean,CYQ.Data.Tool.EscapeOp)">
            <param name="op">符号转义选项</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.WriteJson(System.Boolean,System.Boolean,System.String)">
            <summary>
            输出Json[可指定保存路径]
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Bind(System.Object)">
            <summary>
            将数据表绑定到列表控件
            </summary>
            <param name="control">列表控件[包括Repeater/DataList/GridView/DataGrid等]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Bind(System.Object,System.String)">
            <summary>
            将数据表绑定到列表控件
            </summary>
            <param name="control">列表控件[包括Repeater/DataList/GridView/DataGrid等]</param>
            <param name="nodeID">当Control为XHtmlAction对象时，需要指定绑定的节点id</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Merge(CYQ.Data.Table.MDataTable)">
            <summary>
            将新表的行放到原表的下面。
            </summary>
            <param name="newTable"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.SetState(System.Int32)">
            <summary>
            将表里所有行的数据行的状态全部重置
            </summary>
            <param name="state">状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.SetState(System.Int32,CYQ.Data.Table.BreakOp)">
            <summary>
            将表里所有行的数据行的状态全部重置
            </summary>
            <param name="state">状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]</param>
            <param name="op">状态设置选项</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToList``1(System.Boolean[])">
            <summary>
            转实体列表
            </summary>
            <param name="useEmit">是否使用Emit方式转换[数据越多[大于500条]性能越高],不写默认自适应判断</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.AcceptChanges(CYQ.Data.Table.AcceptOp)">
            <summary>
            批量插入或更新 [提示：操作和当前表名有关，如当前表名不是要提交入库的表名,请给TableName属性重新赋值]
            </summary>
            <param name="op">操作选项[插入|更新]</param>
            <returns>返回false时，若有异常，存在：DynamicData 参数中</returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.AcceptChanges(CYQ.Data.Table.AcceptOp,System.Data.IsolationLevel)">
            <summary>
            批量插入或更新 [提示：操作和当前表名有关，如当前表名不是要提交入库的表名,请给TableName属性重新赋值]
            </summary>
            <param name="op">操作选项[插入|更新]</param>
            <param name="tranLevel">事务等级【外部没有事务时有效】</param>
            <returns>返回false时，若有异常，存在：DynamicData 参数中</returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.AcceptChanges(CYQ.Data.Table.AcceptOp,System.String,System.Object[])">
            <param name="op">操作选项[插入|更新]</param>
            <param name="newConn">指定新的数据库链接</param>
            <param name="jointPrimaryKeys">AcceptOp为Update或Auto时，若需要设置联合主键为唯一检测或更新条件，则可设置多个字段名</param>
            <returns>返回false时，若有异常，存在：DynamicData 参数中</returns>
        </member>
        <!-- 对于成员“M:CYQ.Data.Table.MDataTable.AcceptChanges(CYQ.Data.Table.AcceptOp,System.Data.IsolationLevel,System.String,System.Object[])”忽略有格式错误的 XML 注释 -->
        <member name="M:CYQ.Data.Table.MDataTable.GetChanges">
            <summary>
            获取修改过的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetChanges(CYQ.Data.Table.RowOp)">
            <summary>
            获取修改过的数据(若无修改，则返回Null）
            </summary>
            <param name="rowOp">仅Insert和Update选项可用</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetColumnItems``1(System.String)">
            <summary>
            返回某列的集合
            <param name="columnName">列名</param>
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetColumnItems``1(System.String,CYQ.Data.Table.BreakOp)">
            <summary>
            返回某列的集合
            <param name="columnName">列名</param>
            <param name="op">参数选项</param>
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetColumnItems``1(System.String,CYQ.Data.Table.BreakOp,System.Boolean)">
            <summary>
            返回某列的集合
            </summary>
            <typeparam name="T">列的类型</typeparam>
            <param name="columnIndex">列名</param>
            <param name="op">过滤选项</param>
            <param name="isDistinct">是否去掉重复数据</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetColumnItems``1(System.Int32)">
            <summary>
            返回某列的集合
            </summary>
            <typeparam name="T">列的类型</typeparam>
            <param name="columnIndex">第N列</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetColumnItems``1(System.Int32,CYQ.Data.Table.BreakOp)">
            <summary>
            返回某列的集合
            </summary>
            <typeparam name="T">列的类型</typeparam>
            <param name="columnIndex">第N列</param>
            <param name="op">过滤选项</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetColumnItems``1(System.Int32,CYQ.Data.Table.BreakOp,System.Boolean)">
            <summary>
            返回某列的集合
            </summary>
            <typeparam name="T">列的类型</typeparam>
            <param name="columnIndex">第N列</param>
            <param name="op">过滤选项</param>
            <param name="isDistinct">是否去掉重复数据</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Clone">
            <summary>
            复制表
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetSchema(System.Boolean)">
            <summary>
            复制表的结构
            </summary>
            <param name="clone">是否克隆表结构</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Distinct(CYQ.Data.Table.MDataTable@)">
            <summary>
            过滤掉重复的数据行（仅比较基础类型、复杂数据类型仅比较类型名称）。
            <param name="filterRows">被过滤的数据集表</param>
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Distinct">
            <summary>
            过滤掉重复的数据行（仅比较基础类型、复杂数据类型仅比较类型名称）。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.System#Data#IDataReader#Close">
            <summary>
            清除所有行
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.System#Data#IDataReader#NextResult">
            <summary>
            是否还有下一条数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.System#Data#IDataReader#Read">
            <summary>
            索引移到下一条，准备进行读取。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.CreateFrom(System.Data.Common.DbDataReader)">
            <summary>
            不关闭Sdr（因为外部MProc.ExeMDataTableList还需要使用）
            </summary>
            <param name="sdr"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.CreateFrom(System.Object,CYQ.Data.Table.BreakOp)">
            <summary>
            从List列表里加载成MDataTable
            </summary>
            <param name="entityList">实体列表对象</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.CreateFrom(System.String)">
            <summary>
            从Json或Xml字符串反加载成MDataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.CreateFrom(System.String,CYQ.Data.Table.MDataColumn,CYQ.Data.Tool.EscapeOp)">
            <summary>
            从Json或Xml字符串反加载成MDataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Min``1(System.String)">
            <summary>
            获取列的最小值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="columnName">列名</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Min``1(System.Int32)">
            <summary>
            获取列的最小值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="index">列索引</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Max``1(System.String)">
            <summary>
            获取列的最大值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="columnName">列名</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Max``1(System.Int32)">
            <summary>
            获取列的最大值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="index">列索引</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Sum``1(System.String)">
            <summary>
            汇总某列的值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="columnName">列名</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Sum``1(System.Int32)">
            <summary>
            汇总某列的值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="index">列索引</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Avg``1(System.String)">
            <summary>
            记算某列的平均值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="columnName">列名</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Avg``1(System.Int32)">
             <summary>
            记算某列的平均值
             </summary>
             <typeparam name="T">类型</typeparam>
             <param name="index">列索引</param>
             <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Pivot">
            <summary>
            行转换列（不指定时，默认取最后三列处理）
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Pivot(System.String,System.String,System.String)">
            <summary>
            行转换列
            </summary>
            <param name="rowName">用于指定行的列名</param>
            <param name="colName">用于分拆成列的列名</param>
            <param name="valueName">用于显示值的列名</param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.JoinOnName">
            <summary>
            用于关联表的列名，不设置时默认取表主键值
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.Rows">
            <summary>
            表格行
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.DynamicData">
            <summary>
            动态存储数据(如：AcceptChanges 产生的异常默认由本参数存储)
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.Description">
            <summary>
            表名描述
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.Columns">
            <summary>
            表格的架构列
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.Conn">
            <summary>
            该表归属的数据库链接。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.System#Data#IDataRecord#FieldCount">
            <summary>
            获取列的总数
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.System#Data#IDataReader#Depth">
            <summary>
            获取数据行总数
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.System#Data#IDataReader#IsClosed">
            <summary>
            是否已读取完所所有数据，并清空了记录。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.RecordsAffected">
            <summary>
            返回（查询时）记录总数。
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataCell">
            <summary>
            单元格
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.#ctor(CYQ.Data.Table.MCellStruct@)">
            <summary>
            原型模式（Prototype Method）
            </summary>
            <param name="dataStruct"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.CheckNewValue">
            <summary>
            延时检测值的类型
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.ChangeValue(System.Object,System.Type,CYQ.Data.DataGroupType)">
            <summary>
             值的数据类型转换。
            </summary>
            <param name="value">要被转换的值</param>
            <param name="convertionType">要转换成哪种类型</param>
            <param name="group">数据库类型的组号</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.Clear">
            <summary>
            将值重置为空
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.SetDefaultValueToValue">
            <summary>
            设置默认值。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.ToString">
            <summary>
            已被重载，默认返回Value值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.Equals(System.Object)">
            <summary>
            是否值相同[已重写该方法]
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.ToRow">
            <summary>
            转成行
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.StringValue">
            <summary>
            字符串值
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.IsJsonIgnore">
            <summary>
            是否忽略Json转换
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.IsNull">
            <summary>
            值是否为Null值[只读属性]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.IsNullOrEmpty">
            <summary>
            值是否为Null或为空[只读属性]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.ColumnName">
            <summary>
            列名[只读属性]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.Struct">
            <summary>
            单元格的结构
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.State">
            <summary>
            Value的状态:0;未改,1;进行赋值操作[但值相同],2:赋值,值不同改变了
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MCellStruct">
            <summary>
            单元结构属性
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MCellStruct.Clone">
            <summary>
            克隆一个对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MCellStruct.Set(System.Object)">
            <summary>
            为列的所有行设置值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MCellStruct.GetWhereIn">
            <summary>
            返回该列的where In 条件 : Name in("aa","bb")
            </summary>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.MDataColumn">
            <summary>
            结构集合
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.IsJsonIgnore">
            <summary>
            是否忽略Json转换
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.FKTableName">
            <summary>
            外键表名
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.OldName">
            <summary>
            旧的列名（AlterOp为Rename时可用）
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.ColumnName">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.Description">
            <summary>
            字段描述
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.IsPrimaryKey">
            <summary>
            是否关键字
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.IsAutoIncrement">
            <summary>
            是否自增加
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.IsCanNull">
            <summary>
            是否允许为Null
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.IsUniqueKey">
            <summary>
            是否唯一索引
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.IsForeignKey">
            <summary>
            是否外键
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.SqlType">
            <summary>
            SqlDbType类型
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.MaxSize">
            <summary>
            最大字节
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.Scale">
            <summary>
            精度（小数位）
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.SqlTypeName">
            <summary>
            原始的数据库字段类型名称
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.AlterOp">
            <summary>
            列结构改变状态
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MCellValue">
            <summary>
            单元结构的值
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellValue.State">
            <summary>
            状态改变:0;未改（无法插入和更新）,1;进行赋值操作[但值相同](允许插入),2:赋值,值不同改变了（允许插入和更新）
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellValue.Value">
            <summary>
            已经Fix()类型转换后的值。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellValue.SourceValue">
            <summary>
            未进行类型转换之前的值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MCellValue.Clear">
            <summary>
            将值重置为空
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataColumn">
            <summary>
            头列表集合
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataColumn.IsColumnNameChanged">
            <summary>
            列名是否变更
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataColumn.columnIndex">
            <summary>
            存储列名的索引
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataColumn.CheckDuplicate">
            <summary>
            添加列时，检测名称是否重复(默认为true)。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.op_Implicit(System.Data.DataColumnCollection)~CYQ.Data.Table.MDataColumn">
            <summary>
            隐式转换列头
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.GetIndex(System.String)">
            <summary>
            获取列所在的索引位置(若不存在返回-1）
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.SetOrdinal(System.String,System.Int32)">
            <summary>
            将 列 的序号或位置更改为指定的序号或位置。
            </summary>
            <param name="columnName">列名</param>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.SetValue(System.String,System.Object)">
            <summary>
            给列批量赋相同的值。
            </summary>
            <param name="columnName">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.ToJson(System.Boolean)">
            <summary>
            输出Json格式的表构架
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.ToRow(System.String)">
            <summary>
            转成行
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.WriteSchema(System.String)">
            <summary>
            保存表架构到外部文件中(json格式）
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataColumn.DataBaseType">
            <summary>
            当前的数据库类型。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataColumn.DataBaseVersion">
            <summary>
            当前的数据库版本号。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataColumn.Conn">
            <summary>
            当前的数据库链接项（或语句）
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataColumn.isViewOwner">
            <summary>
            该结构是否由视图拥有
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.ToTable">
            <summary>
            将表结构的数据转成Table显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.Add(System.String)">
            <summary>
            添加列
            </summary>
            <param name="columnName">列名</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.Add(System.String,System.Data.SqlDbType)">
            <param name="SqlType">列的数据类型</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.Add(System.String,System.Data.SqlDbType,System.Boolean)">
            <param name="isAutoIncrement">是否自增id列</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.Add(System.String,System.Data.SqlDbType,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Object,System.Int16)">
            <param name="defaultValue">默认值[日期类型请传入SqlValue.GetDate]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.CreateFrom(System.String)">
            <summary>
            从Json或文件中加载成列信息
            </summary>
            <param name="jsonOrFileName">Json或文件（完整路径）名称</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.CreateFrom(System.String,System.Boolean)">
            <summary>
            从Json或文件中加载成列信息
            </summary>
            <param name="jsonOrFileName">Json或文件（完整路径）名称</param>
            <param name="readTxtOrXml">是否从.txt或.xml文件中读取架构（默认为true）</param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Table.MDataColumn.Table">
            <summary>
            架构所引用的表
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataColumn.Description">
            <summary>
            表名描述
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataColumn.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataColumn.JointPrimary">
            <summary>
            联合主键
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataColumn.FirstPrimary">
            <summary>
            第一个主键
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataColumn.FirstUnique">
            <summary>
            首个唯一键
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataColumn.Item(System.Int32)">
            <summary>
            ReadOnly
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataView">
            <summary>
            仅用于Winform的列表绑定。
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataProperty">
            <summary>
            实现Winform的表格控件绑定功能。
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.FastToT">
            <summary>
            快速转换类[数据量越大[500条起],性能越高]
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.FastToT.CreateMethod(System.Type,CYQ.Data.Table.MDataColumn)">
            <summary>
            构建一个ORM实体转换器（第1次构建有一定开销时间）
            </summary>
            <param name="tType">转换的目标类型</param>
            <param name="schema">表数据架构</param>
        </member>
        <member name="T:CYQ.Data.Table.AlterOp">
            <summary>
            列结构修选项
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AlterOp.None">
            <summary>
            默认不修改状态
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AlterOp.AddOrModify">
            <summary>
            添加或修改状态
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AlterOp.Drop">
            <summary>
            删除列状态
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AlterOp.Rename">
            <summary>
            重命名列状态
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataTableJoin">
            <summary>
            表间的关联关系
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.AcceptOp">
            <summary>
            批量更新选项
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AcceptOp.Insert">
            <summary>
            批量插入（由系统产生自增加id）
            该执行会开启事务。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AcceptOp.InsertWithID">
            <summary>
            批量插入（由用户指定id插入）
            该执行会开启事务。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AcceptOp.Update">
            <summary>
            批量更新
            该执行会开启事务。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AcceptOp.Delete">
            <summary>
            批量删除
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AcceptOp.Auto">
            <summary>
            批量自动插入或更新（检测主键数据若存在，则更新；不存在，则插入）
            该执行不会开启事务。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AcceptOp.Truncate">
            <summary>
            清空表（只有和Insert或InsertWithID组合使用时才有效）
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.BreakOp">
            <summary>
            MDataTable 与 MDataRow SetState 的过滤选项
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.BreakOp.None">
            <summary>
            未设置，设置所有
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.BreakOp.Null">
            <summary>
            跳过设置值为Null的。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.BreakOp.Empty">
            <summary>
            跳过设置值为空的。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.BreakOp.NullOrEmpty">
            <summary>
            跳过设置值为Null或空的。
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.RowOp">
            <summary>
            MDataRow 与 JsonHelper 行数据的过滤选项
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.RowOp.None">
            <summary>
            未设置，输出所有，包括Null值的列
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.RowOp.IgnoreNull">
            <summary>
            输出所有，但不包括Null值的列
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.RowOp.Insert">
            <summary>
            输出具有插入状态的值
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.RowOp.Update">
            <summary>
            输出具有更新状态的值
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.ConvertTool">
            <summary>
            类型转换（支持json转实体）
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ConvertTool.ChangeType(System.Object,System.Type)">
            <summary>
            类型转换(精准强大)
            </summary>
            <param name="value">值处理</param>
            <param name="t">类型</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.ConvertTool.ChangeType``1(System.Object)">
            <summary>
            类型转换(精准强大)
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ConvertTool.ChangeReaderToList``1(System.Data.Common.DbDataReader)">
            <summary>
            DbDataReader To List
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ConvertTool.ChangeReaderToJson(System.Data.Common.DbDataReader,CYQ.Data.Tool.JsonHelper,System.Boolean)">
            <summary>
            DbDataReader To Json
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.TableInfo">
            <summary>
            （表、视图、存储过程）相关信息
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.TableInfo.GetHashKey(System.String)">
            <summary>
            获取指定（表、视图、存储过程）名称的Hash值
            </summary>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Tool.TableInfo.Name">
            <summary>
            （表、视图、存储过程）名称（只读）
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.TableInfo.Type">
            <summary>
            类型（只读）
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.TableInfo.Description">
            <summary>
            描述（可写）
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.TableInfo.DBInfo">
            <summary>
            数据库信息（只读）
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.TableInfo.Columns">
            <summary>
            获取相关的列架构（对表和视图有效）
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.DBInfo">
            <summary>
            数据库信息
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBInfo.GetHashKey(System.String)">
            <summary>
            获取指定数据库链接的HashKey
            </summary>
            <param name="connNameOrString">配置名或链接字符串</param>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.Tool.EncryptHelper">
            <summary>
            密码加密类【含Hash算法】
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.EncryptHelper.GetHashKey(System.String)">
            <summary>
            【用于分布式】根据字符串获取相应的HashKey
            </summary>
            <param name="key">字符串</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.EncryptHelper.GetHashCode(System.String)">
            <summary>
            【用于分布式】根据字符串获取相应的HashCode
            </summary>
            <param name="key">字符串</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.EncryptHelper.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="text">加密的内容</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.EncryptHelper.Encrypt(System.String,System.String)">
            <param name="key">指定加密的key</param>
        </member>
        <member name="M:CYQ.Data.Tool.EncryptHelper.Encrypt(System.String,System.Byte[])">
            <summary>
            3des加密字符串
            </summary>
            <param name="text">要加密的字符串</param>
            <param name="hashKey">密钥</param>
            <returns>加密后并经base64编码的字符串</returns>
            <remarks>静态方法，采用默认ascii编码</remarks>
        </member>
        <member name="M:CYQ.Data.Tool.EncryptHelper.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="text">要解密的字符串</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:CYQ.Data.Tool.EncryptHelper.Decrypt(System.String,System.String)">
            <param name="key">指定加密的key</param>
        </member>
        <member name="M:CYQ.Data.Tool.EncryptHelper.Decrypt(System.String,System.Byte[])">
            <summary>
            3des解密字符串
            </summary>
            <param name="text">要解密的字符串</param>
            <param name="key">密钥</param>
            <returns>解密后的字符串</returns>
            <exception cref="!:">密钥错误</exception>
            <remarks>静态方法，采用默认ascii编码</remarks>
        </member>
        <member name="T:CYQ.Data.Tool.HashCreator">
            <summary>
            创建唯一Hash。
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.HashCreator.CreateKey(System.String)">
            <summary>
            创建HashKey，重复概率低一些。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.HashCreator.CreateCode(System.String)">
            <summary>
            创建HashCode，有一定重复概率。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.HashCreator.GetHashCode(System.String)">
            <summary>
            取自java的字符串hash算法(有一定重复的概率)。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.Tool.ReflectTool">
            <summary>
            反射工具（带缓存）
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.ReflectTool.propCache">
            <summary>
            将PropertyInfo[] 改成PropertyInfo List，是因为.NET的CLR会引发内存读写异常（启用IntelliTrace时）
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ReflectTool.GetPropertyList(System.Type)">
            <summary>
            获取属性列表
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.ReflectTool.GetFieldList(System.Type)">
            <summary>
            获取Field列表
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ReflectTool.GetArgumentLength(System.Type@)">
            <summary>
             获取泛型的参数长度（非泛型按默认方法计算）
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ReflectTool.GetArgumentLength(System.Type@,System.Type[]@)">
            <summary>
            获取泛型的参数长度，同时类型修改为普通类型（非泛型按默认方法计算）
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ReflectTool.GetAttributes(System.Type,System.Type,System.Reflection.PropertyInfo,System.Reflection.FieldInfo)">
            <summary>
            获取特性列表
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ReflectTool.ExistsAttr(System.Type,System.Reflection.PropertyInfo,System.Reflection.FieldInfo)">
            <summary>
            判断是否存在指定的属性
            </summary>
            <param name="searchType"></param>
            <param name="pi"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.ReflectTool.GetSystemType(System.Type@)">
            <summary>
            获取系统类型，若是Nullable类型，则转为基础类型。
             </summary>
        </member>
        <member name="T:CYQ.Data.Tool.SysType">
            <summary>
            转实体所用参数
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.SysType.Base">
            <summary>
            基础类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.SysType.Enum">
            <summary>
            枚举类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.SysType.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.SysType.Collection">
            <summary>
            集合类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.SysType.Generic">
            <summary>
            泛型
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.SysType.Custom">
            <summary>
            自定义类
            </summary>
        </member>
        <member name="T:CYQ.Data.UI.IUIValue">
            <summary>
            对于自定义控件，只要继承此接口，即可以使用GetFrom与SetTo方法
            </summary>
        </member>
        <member name="P:CYQ.Data.UI.IUIValue.MValue">
            <summary>
            控件的值
            </summary>
        </member>
        <member name="P:CYQ.Data.UI.IUIValue.MEnabled">
            <summary>
            控件的启用状态
            </summary>
        </member>
        <member name="P:CYQ.Data.UI.IUIValue.MID">
            <summary>
            控件的名称（Name）或id
            </summary>
        </member>
        <member name="T:CYQ.Data.UI.RegisterUI">
            <summary>
            第三方控件UI注册
            </summary>
        </member>
        <member name="M:CYQ.Data.UI.RegisterUI.Add(System.String,System.String)">
            <summary>
            添加要注册的第三方控件名称。
            </summary>
            <param name="controlClassName">控件类名，如：TextBox</param>
            <param name="propertyName">控件的自动取值或赋值属性名称，如：Text</param>
        </member>
        <member name="M:CYQ.Data.UI.RegisterUI.Clear">
            <summary>
            清除UI注册
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.SqlCompatible">
            <summary>
            Sql语句多数据库兼容
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCompatible.Format(System.String,CYQ.Data.DataBaseType)">
            <summary>
            同语句多数据库兼容处理
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.SqlFormat">
            <summary>
            Sql 语句格式化类 (类似助手工具)
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.Keyword(System.String,CYQ.Data.DataBaseType)">
            <summary>
            Sql关键字处理
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.NotKeyword(System.String)">
            <summary>
            去除关键字符号
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.Compatible(System.Object,CYQ.Data.DataBaseType,System.Boolean)">
            <summary>
            Sql数据库兼容和Sql注入处理
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.RemoveWhereOneEqualsOne(System.String)">
            <summary>
            移除"where 1=1"
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.BuildSqlWithWhereOneEqualsTow(System.String)">
            <summary>
            创建补充1=2的SQL语句
            </summary>
            <param name="tableName">表名、或视图语句</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.FormatMySqlBit(System.String,CYQ.Data.Table.MDataColumn)">
            <summary>
            Mysql Bit 类型不允许条件带引号 （字段='0' 不可以）
            </summary>
            <param name="where"></param>
            <param name="mdc"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.GetIFieldSql(System.Object)">
            <summary>
            静态的对IField接口处理
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.FormatDefaultValue(CYQ.Data.DataBaseType,System.Object,System.Int32,System.Data.SqlDbType)">
            <summary>
            将各数据库默认值格式化成标准值，将标准值还原成各数据库默认值
            </summary>
            <param name="flag">[0:转成标准值],[1:转成各数据库值],[2:转成各数据库值并补充字符串前后缀]</param>
            <param name="sqlDbType">该列的值</param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.SQL.SqlInjection.FilterKeyList">
            <summary>
            用List 也是因为内存读写异常问题（所有的[]数组，看似都有这问题）
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.SqlValue">
            <summary>
            用于多数据库兼容的替换关键字/函数
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Desc">
            <summary>
            对于Bit类型[是/否] 类型的排序：[#DESC] (Access特殊)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Asc">
            <summary>
            对于Bit类型[是/否] 类型的排序：[#ASC] (Access特殊)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.True">
            <summary>
            对于Bit类型[是/否] 的条件值：[#TRUE]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.False">
            <summary>
            对于Bit类型[是/否] 的条件值：[#FALSE]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Len">
            <summary>
            数据库函数 Len 取长度：[#LEN](字段)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Guid">
            <summary>
            数据库函数 GUID 获取：[#GUID]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.IsNull">
            <summary>
            数据库函数 ISNULL 判断：[#ISNULL](ColumnName,ReplaceValueWhenIsNull)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.GetDate">
            <summary>
            数据库函数 GetDate 获取当前时间：[#GETDATE]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Year">
            <summary>
            数据库函数 Year 获取时间的年：[#YEAR](字段)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Month">
            <summary>
             数据库函数 Month 获取时间的月：[#MONTH](字段)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Day">
            <summary>
            数据库函数 Day 获取时间的日：[#DAY](字段)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Substring">
            <summary>
            数据库函数 Substring 截取字符串：[#SUBSTRING](字段,起始索引,1开始,长度int)
            <example>
            <code>
            示例： [#Substring](Title,1,2)
            </code>
            </example>
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.CharIndex">
            <summary>
            数据库函数 CharIndex 查询字符所在的位置：[#CHARINDEX]('要查询的字符',字段)
            <example>
            <code>
            示例： [#CHARINDEX]('findtitle',Title)>0
            </code>
            </example>
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.DateDiff">
            <summary>
            数据库函数 DateDiff 比较日期的差异天数：[#DATEDIFF](参数,开始时间,结束时间)
            参数："yyyy", "m","d", "h", "n", "s"
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Case">
            <summary>
            数据库函数 Case 分支语句，其它Case 一起的关键字也需要包含。
            <example>
            <code>
            示例： [#CASE] [#WHEN] languageid={1} [#THEN] {2} [#ELSE] 0 [#END]
            </code>
            </example>
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.CaseWhen">
            <summary>
            数据库函数 Case When 分支语句，其它Case 一起的关键字也需要包含。
            <example>
            <code>
            示例： [#CASE#WHEN] languageid={0} [#THEN] 1000000 [#ELSE] 0 [#END]
            </code>
            </example>
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Contact">
            <summary>
            数据库链接符号 + Oracle下为：||
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Left">
            <summary>
            数据库函数:Left(column,length)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Right">
            <summary>
            数据库函数：Right(column,length)
            </summary>
        </member>
        <member name="T:CYQ.Data.Extension.IField">
            <summary>
            实现此接口，来扩展自定义IField语法(已过期)
            </summary>
        </member>
        <member name="P:CYQ.Data.Extension.IField.Sql">
            <summary>
            内部的SQL语句
            </summary>
        </member>
        <member name="P:CYQ.Data.Extension.IField.ColID">
            <summary>
            列序号[列的顺序]
            </summary>
        </member>
        <member name="P:CYQ.Data.Extension.IField.Name">
            <summary>
            列名或表名
            </summary>
        </member>
        <member name="T:CYQ.Data.DalCreate">
            <summary>
            数据库类型操作类
            </summary>
        </member>
        <member name="F:CYQ.Data.DalCreate.dalBaseDic">
            <summary>
            全局存档，是为了用单例来实现全局事务。
            </summary>
        </member>
        <member name="M:CYQ.Data.DalCreate.CreateDal(System.String)">
            <summary>
            简单工厂（Factory Method）
            </summary>
        </member>
        <member name="T:CYQ.Data.Log">
            <summary>
            Write Log to txt or database
            <para>日志静态类（可将日志输出到文本中）</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Log.Write(System.Exception)">
            <summary>
            如果配置数据库则写数据库，没有配置写文本
            </summary>
        </member>
        <member name="M:CYQ.Data.Log.Write(System.String)">
            <summary>
            如果配置数据库则写数据库，没有配置写文本
            </summary>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToTxt(System.String)">
            <summary>
            Write log to txt
             <para>指定将日志写到外部txt[web.config中配置路径，配置项为Logpath,默认路径为 "Log/" ]</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToDB(System.Exception,System.String)">
            <summary>
            write log to database [LogConn must has config value]
             <para>将日志写到数据库中[需要配置LogConn项后方生效 ]</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToDB(System.String,System.String)">
            <summary>
            write log to database [LogConn must has config value]
             <para>将日志写到数据库中[需要配置LogConn项后方生效 ]</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Log.GetExceptionMessage(System.Exception)">
            <summary>
            Convert Exception to string
            <para>获取异常的内部信息</para>
            </summary>
        </member>
        <member name="F:CYQ.Data.OracleDal.ManagedName">
            <summary>
            区分Oracle11和Oracle12的Dll名称。
            </summary>
        </member>
        <member name="M:CYQ.Data.OracleDal.GetFactory">
            <summary>
            抽象工厂
            </summary>
        </member>
        <member name="F:CYQ.Data.OracleDal.clientType">
            <summary>
            值-1未初始化；0使用OracleClient；1使用DataAccess；2使用ManagedDataAccess
            </summary>
        </member>
        <member name="P:CYQ.Data.OracleDal.IsUseOdpNet">
            <summary>
            是否使用Oracle的ODP.NET组件。
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.DataType">
            <summary>
            数据类型转换类
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetType(System.Data.SqlDbType)">
            <summary>
            获得数据类型对应的Type
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetType(System.Data.SqlDbType,CYQ.Data.DataBaseType)">
            <summary>
            获得数据类型对应的Type
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetSqlType(System.Type)">
            <summary>
            将DbType类型对应映射到SqlDbType类型
            </summary>
            <param name="type">DbType类型</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetSqlType(System.String)">
            <summary>
            将DbType类型字符串表达方式对应映射到SqlDbType类型
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetDbType(System.String)">
            <summary>
            将DbType类型字符串表达形式对应映射到DbType类型
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetDbType(System.String,CYQ.Data.DataBaseType)">
            <summary>
            将DbType类型字符串表达形式对应映射到DbType类型
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetDbType(System.Type)">
            <summary>
            将SqlDbType类型对应映射到DbType类型
            </summary>
            <param name="type">SqlDbType类型</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetGroup(System.Data.SqlDbType)">
            <summary>
            字母型返回0；数字型返回1；日期型返回2；bool返回3；guid返回4；其它返回999
            </summary>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetGroup(System.Data.SqlDbType,CYQ.Data.DataBaseType)">
            <summary>
            字母型返回0；数字型返回1；日期型返回2；bool返回3；guid返回4；其它返回999
            </summary>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetDataType(CYQ.Data.Table.MCellStruct,CYQ.Data.DataBaseType,System.String)">
            <summary>
            导数据，创建表所用
            </summary>
            <param name="ms">单元结构</param>
            <param name="dalTo">数据库类型</param>
            <param name="version">数据库版本号</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetMaxSize(System.Data.SqlDbType)">
            <summary>
            CodeFirst时的默认类型的字段长度。
            </summary>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.SQL.SqlCreateForPager">
            <summary>
            Sql分页语句类
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.top1Pager">
            <summary>
            首页查询
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.top2Pager">
            <summary>
            最后一页查询
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.top3Pager">
            <summary>
            前半段分页查询
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.top4Pager">
            <summary>
            后半段分页查询（即倒过来查询）
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.rowNumberPager">
            <summary>
            MSSQL、Oracle的行号分页
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.tempTablePager">
            <summary>
            临时表分页（不带自增加序列）
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.tempTablePagerWithIdentity">
            <summary>
            临时表分页（带自增加序列）
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreateForPager.GetOrderBy(System.String,System.Boolean,System.String)">
            <summary>
            获取order by 语句
            </summary>
            <param name="reverse">排序是否反转</param>
        </member>
        <member name="T:CYQ.Data.SQL.SqlCreate">
            <summary>
            数据操作语句类
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreate.isCanDo">
            <summary>
            是否允许执行SQL操作（仅对Insert和Update有效；如果SQL语法错误，则拒绝执行）
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreate.updateExpression">
            <summary>
            更新操作的附加表达式。
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreate.selectColumns">
            <summary>
            指定查询的列。
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreate.GetInsertSql">
            <summary>
            返回插入的字符串
            </summary>
            <returns>结果如:insert into tableName(id,Name,Value) values(@id,@Name,@Value)</returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreate.GetUpdateSql(System.Object)">
            <summary>
            返回不包括Where条件的字符串
            </summary>
            <returns>结果如:Update tableName set Name=@Name,Value=@Value</returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreate.GetPrimaryWhere">
            <summary>
            获取主键组合的Where条件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreate.GetWhere(CYQ.Data.DataBaseType,System.Boolean,System.Collections.Generic.List{CYQ.Data.Table.MDataCell})">
            <summary>
            根据元数据列组合where条件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreate.GetColumnName(CYQ.Data.Table.MDataColumn,System.Boolean,CYQ.Data.DataBaseType)">
            <summary>
            获得批量导入的列名。
            </summary>
            <param name="mdc"></param>
            <param name="keepID"></param>
            <param name="dalType"></param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.SQL.SqlCreate.AutoID">
            <summary>
            oracle序列名称
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataTableBatchAction">
            <summary>
            批量操作。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataTableBatchAction.jointPrimaryIndex">
            <summary>
            联合主键
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataTableBatchAction._dalHelper">
            <summary>
            内部操作对象（需要同一个事务处理）。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableBatchAction.FixTable(CYQ.Data.Table.MDataColumn)">
            <summary>
            进行列修正（只有移除 和 修正类型，若无主键列，则新增主键列）
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableBatchAction.SetJoinPrimaryKeys(System.Object[])">
            <summary>
            设置联合主键
            </summary>
            <param name="jointPrimaryKeys">联合主键</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableBatchAction.CheckGUIDAndDateTime(CYQ.Data.DataBaseType)">
            <summary>
            检测GUID，若空，补值。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTableBatchAction.IsTruncate">
            <summary>
            Insert前是否先清表
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.Op">
            <summary>
            操作符号
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.None">
            <summary>
            没有操作
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.Big">
            <summary>
            操作符号:">"
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.BigEqual">
            <summary>
            操作符号:">="
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.Equal">
            <summary>
            操作符号:"="
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.NotEqual">
            <summary>
            操作符号:"&lt;>"
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.Small">
            <summary>
            操作符号:"&lt;"
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.SmallEqual">
            <summary>
            操作符号:"&lt;="
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.Like">
            <summary>
            操作符号:"like"
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.NotLike">
            <summary>
            操作符号:"not like"
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.IsNull">
            <summary>
            是否Null值
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.IsNotNull">
            <summary>
            非Null值
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.In">
            <summary>
            操作符号：In
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.NotIn">
            <summary>
            操作符号：Not In
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.Ao">
            <summary>
            查询的基本连接条件
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.TFilter">
            <summary>
            条件过滤参数
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataTableFilter">
            <summary>
            MDataTable查询过滤器
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.GetTFilter(System.Object,CYQ.Data.Table.MDataColumn,System.Collections.Generic.List{CYQ.Data.Table.TFilter}@)">
            <summary>
            多个条件
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.GetSingleTFilter(System.String,CYQ.Data.Table.MDataColumn)">
            <summary>
            单个条件
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.GetTFilterOk(System.String,System.Int32,System.String,CYQ.Data.Table.Op,CYQ.Data.Table.MDataColumn,CYQ.Data.Table.TFilter@)">
            <summary>
            条件比较
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.CompareMore(CYQ.Data.Table.MDataRow,System.Collections.Generic.List{CYQ.Data.Table.TFilter})">
            <summary>
            多条件下值比较
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.SplitWhereOrderby(System.String@,System.String@)">
            <summary>
            分隔where条件中order by 出来
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.FilterColumns(CYQ.Data.Table.MDataTable@,System.Object[])">
            <summary>
            只保留查询的列
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTableFilter.Ops">
            <summary>
            SQL操作符号
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.IOHelper">
            <summary>
            文件读取类（能自动识别文件编码）
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.IOHelper.ReadAllText(System.String)">
            <summary>
            读取文件内容，并自动识别编码
            </summary>
            <param name="fileName">完整路径</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.IOHelper.ReadAllText(System.String,System.Int32)">
            <param name="cacheMinutes">缓存分钟数（为0则不缓存）</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.IOHelper.ReadAllText(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            读取文件内容
            </summary>
            <param name="encoding">指定编码时（会跳过编码自动检测）</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.IOHelper.ReadAllLines(System.String)">
            <summary>
            读取文件内容，并自动识别编码
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.IOHelper.Write(System.String,System.String)">
            <summary>
            往文件里写入数据(文件存在则复盖，不存在则更新)
            </summary>
            <param name="fileName"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.IOHelper.Append(System.String,System.String)">
            <summary>
            往文件里追加数据(文件存在则追加，不存在则更新)，并自动识别文件编码
            </summary>
            <param name="fileName"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.IOHelper.Delete(System.String)">
            <summary>
            删除文件
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.IOHelper.DetectEncode(System.String)">
            <summary>
            检测并返回文件编码。
            </summary>
            <param name="fileName">文件路径。</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.IOHelper.DetectEncode(System.Byte[])">
            <summary>
            检测并返回文件编码。
            </summary>
            <param name="bytes">检测字节</param>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.Tool.TextEncodingDetect">
            <summary>
            字节文本编码检测
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.TextEncodingDetect.IsChinese">
            <summary>
            是否中文
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.TextEncodingDetect.hasBom">
            <summary>
            是否拥有Bom头
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.TextEncodingDetect.GetEncoding(System.Byte[])">
            <summary>
            获取文件编码
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.TextEncodingDetect.DetectWithoutBom(System.Byte[],System.Int32)">
            <summary>
                Automatically detects the Encoding type of a given byte buffer.
            </summary>
            <param name="buffer">The byte buffer.</param>
            <param name="size">The size of the byte buffer.</param>
            <returns>The Encoding type or Encoding.None if unknown.</returns>
        </member>
        <member name="M:CYQ.Data.Tool.TextEncodingDetect.CheckByNewLineChar(System.Byte[],System.Int32)">
            <summary>
                Checks if a buffer contains text that looks like utf16 by scanning for
                newline chars that would be present even in non-english text.
                以检测换行符标识来判断。
            </summary>
            <param name="buffer">The byte buffer.</param>
            <param name="size">The size of the byte buffer.</param>
            <returns>Encoding.none, Encoding.Utf16LeNoBom or Encoding.Utf16BeNoBom.</returns>
        </member>
        <member name="M:CYQ.Data.Tool.TextEncodingDetect.ContainsZero(System.Byte[],System.Int32)">
            <summary>
            Checks if a buffer contains any nulls. Used to check for binary vs text data.
            </summary>
            <param name="buffer">The byte buffer.</param>
            <param name="size">The size of the byte buffer.</param>
        </member>
        <member name="M:CYQ.Data.Tool.TextEncodingDetect.CheckByZeroNumPercent(System.Byte[],System.Int32)">
            <summary>
                Checks if a buffer contains text that looks like utf16. This is done based
                on the use of nulls which in ASCII/script like text can be useful to identify.
                按照一定的空0数的概率来预测。
            </summary>
            <param name="buffer">The byte buffer.</param>
            <param name="size">The size of the byte buffer.</param>
            <returns>Encoding.none, Encoding.Utf16LeNoBom or Encoding.Utf16BeNoBom.</returns>
        </member>
        <member name="M:CYQ.Data.Tool.TextEncodingDetect.CheckUtf8(System.Byte[],System.Int32)">
            <summary>
                Checks if a buffer contains valid utf8.
                以UTF8 的字节范围来检测。
            </summary>
            <param name="buffer">The byte buffer.</param>
            <param name="size">The size of the byte buffer.</param>
            <returns>
                Encoding type of Encoding.None (invalid UTF8), Encoding.Utf8NoBom (valid utf8 multibyte strings) or
                Encoding.ASCII (data in 0.127 range).
            </returns>
            <returns>2</returns>
        </member>
        <member name="M:CYQ.Data.Tool.TextEncodingDetect.CheckChinese(System.Byte[],System.Int32)">
            <summary>
            是否中文编码（GB2312、GBK、Big5）
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.IOWatch.watchPathList">
            <summary>
            监控中的列表。
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.EscapeOp">
            <summary>
            Escape json char options
            <para>JsonHelper 的符号转义选项</para>
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.EscapeOp.Default">
            <summary>
            过滤ascii小于32的特殊值、并对\n "（双引号）进行转义，对\转义符 （仅\\"或\\n时不转义，其它情况转义）
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.EscapeOp.No">
            <summary>
             不进行任何转义，只用于保留原如数据（注意：存在双引号时，[或ascii小于32的值都会破坏json格式]，从而json数据无法被解析）
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.EscapeOp.Yes">
            <summary>
             过滤ascii小于32的特殊值、并对 ：\r \n \t "（双引号） \(转义符号) 直接进行转义
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.EscapeOp.Encode">
            <summary>
            系统内部使用： ascii小于32（包括\n \t \r）、"(双引号)，\(转义符号) 进行编码（规则为：@#{0}#@ {0}为asciii值，系统转的时候会自动解码）
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.JsonHelper">
            <summary>
            Json class for you easy to operate json
            <para>功能全面的json帮助类</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.#ctor(System.Boolean)">
            <param name="addHead">with easyui header ?<para>是否带输出头</para></param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.#ctor(System.Boolean,System.Boolean)">
            <param name="addSchema">first row with table schema ?
            <para>是否首行带表结构[MDataTable.LoadFromJson可以还原表的数据类型]</para></param>
        </member>
        <member name="F:CYQ.Data.Tool.JsonHelper.Escape">
            <summary>
            Escape options
            <para>转义符号</para>
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.JsonHelper.IsConvertNameToLower">
            <summary>
            convert filed to lower
            <para>是否将名称转为小写</para>
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.JsonHelper.IsConvertEnumToString">
            <summary>
            convert enum to string
            <para>是否将枚举转字符串</para>
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.JsonHelper.IsConvertEnumToDescription">
            <summary>
            convert enum to DescriptionAttribute
            <para>是否将枚举转属性描述</para>
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.JsonHelper.DateTimeFormatter">
            <summary>
            formate datetime
            <para>日期的格式化（默认：yyyy-MM-dd HH:mm:ss）</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.AddBr">
            <summary>
            flag a json is end and start a new json
            <para> 添加完一个Json数据后调用此方法换行</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.AddFoot(System.String,System.String)">
            <summary>
            attach json data (AddHead must be true)
            <para>添加底部数据（只有AddHead为true情况才能添加数据）</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Add(System.String,System.String)">
            <summary>
            add json key value
            <para>添加一个字段的值</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Add(System.String,System.String,System.Boolean)">
            <param name="noQuotes">value is no quotes
            <para>值不带引号</para></param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToString">
            <summary>
            out json result
            <para>输出Json字符串</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToString(System.Boolean)">
            <param name="arrayEnd">end with [] ?</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.IsJson(System.String)">
            <summary>
            check string is json
            <para>检测是否Json格式的字符串</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.IsJson(System.String,System.Int32@)">
            <param name="errIndex">the index of the error char
            <para>错误的字符索引</para></param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.GetValue(System.String,System.String,CYQ.Data.Tool.EscapeOp)">
            <summary>
            Get json value
            <para>获取Json字符串的值</para>
            </summary>
            <param name="key">the name or key of json
            <para>键值(有层级时用：XXX.YYY.ZZZ)</para></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.IsSuccess(System.String)">
            <summary>
            Json 返回值是否为true（包含"success":true）
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.OutResult(System.Boolean,System.String)">
            <summary>
            a easy method for you to return a json
            <para>返回Json格式的结果信息</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.OutResult(System.Boolean,System.String,System.Boolean)">
            <param name="noQuates">no ""</param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Split(System.String)">
            <summary>
             split json to dicationary
            <para>将Json分隔成键值对。</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.SplitArray(System.String)">
            <summary>
             split json to dicationary array
            <para>将Json 数组分隔成多个键值对。</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.UnEscape(System.String,CYQ.Data.Tool.EscapeOp)">
            <summary>
            解码替换数据转义符
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.JsonHelper.Level">
            <summary>
            用于控制自循环的层级判断。
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.JsonHelper.LoopCheckList">
            <summary>
            用于自循环检测列表。
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Fill(CYQ.Data.Table.MDataTable)">
            <summary>
            Fill obj and get json from  ToString() method
            <para>从数据表中取数据填充,最终可输出json字符串</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Fill(CYQ.Data.Table.MDataRow)">
            <summary>
            Fill obj and get json from  ToString() method
            <para>从数据行中取数据填充,最终可输出json字符串</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Fill(CYQ.Data.Table.MDataColumn,System.Boolean)">
            <summary>
            从数据结构填充，最终可输出json字符串。
            </summary>
            <param name="column">数据结构</param>
            <param name="isFullSchema">false：输出单行的[列名：数据类型]；true：输出多行的完整的数据结构</param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Fill(System.Object)">
            <summary>
             Fill obj and get json from  ToString() method
            <para>可从类(对象,泛型List、泛型Dictionary）中填充，最终可输出json字符串。</para>
            </summary>
            <param name="obj">实体类对象</param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.FillEntity(System.Object)">
            <summary>
            加载实体
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToMDataTable(System.String,CYQ.Data.Table.MDataColumn,CYQ.Data.Tool.EscapeOp)">
            <summary>
            从Json字符串中反加载成数据表
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToIEnumerator``1(System.String,CYQ.Data.Tool.EscapeOp)">
            <summary>
            将Json转换成集合
            </summary>
            <typeparam name="T">集合类型</typeparam>
            <param name="json">json数据</param>
            <returns></returns>
            
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToEntity``1(System.String,CYQ.Data.Tool.EscapeOp)">
            <summary>
            Convert json to Entity
            <para>将Json转换为实体</para>
            </summary>
            <typeparam name="T">Type<para>类型</para></typeparam>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToList``1(System.String,CYQ.Data.Tool.EscapeOp)">
            <summary>
             Convert json to Entity List
             <para>将Json转换为实体列表</para>
            </summary>
            <typeparam name="T">Type<para>类型</para></typeparam>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToJson(System.Object)">
            <summary>
            Convert object to json
            <para>将一个对象（实体，泛型List，字典Dictionary）转成Json</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToJson(System.Object,System.Boolean,CYQ.Data.Table.RowOp,CYQ.Data.Tool.EscapeOp)">
            <param name="op">default value is RowOp.All
            <para>默认值为RowOp.All</para></param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.XmlToJson(System.String,System.Boolean)">
            <summary>
            转Json
            <param name="xml">xml字符串</param>
            <param name="isConvertNameToLower">字段是否转小写</param>
            <param name="isWithAttr">是否将属性值也输出</param>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToXml(System.String)">
            <summary>
            Convert json to Xml
            <para>将一个Json转成Xml</para>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToXml(System.String,System.Boolean,CYQ.Data.Tool.EscapeOp,System.String)">
            <param name="isWithAttr">default value is true
            <para>是否转成属性，默认true</para></param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ReadJson(System.String)">
            <summary>
            读取文本中的Json（并去掉注释）
            </summary>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.RowOp">
            <summary>
             filter json data
            <para>Json输出行数据的过滤选项</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.Success">
            <summary>
             is success
            <para>是否成功</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.ErrorMsg">
            <summary>
            Error message
            <para>错误提示信息  </para> 
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.RowCount">
            <summary>
            data rows count
            <para>当前返回的行数</para>
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.Total">
            <summary>
            totla count
            <para>所有记录的总数（多数用于分页的记录总数）。</para>
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.DBTool">
            <summary>
            数据库工具类[都是静态方法]
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetDataBaseType(System.String)">
            <summary>
            获取数据库链接的数据库类型
            </summary>
            <param name="conn">链接配置Key或数据库链接语句</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetDataType(CYQ.Data.Table.MCellStruct,CYQ.Data.DataBaseType,System.String)">
            <summary>
            获取指定数据库的数据类型
            </summary>
            <param name="ms">单元格结构</param>
            <param name="dalType">数据库类型</param>
            <param name="version">数据库版本号</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.TestConn(System.String)">
            <summary>
            测试数据库链接语句
            </summary>
            <param name="conn">链接配置Key或数据库链接语句</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.Exists(System.String)">
            <summary>
            是否存在（表 U、视图 V 存储过程 P）
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.Exists(System.String,System.String)">
            <summary>
            是否存在（表 U、视图 V 存储过程 P）
            </summary>
            <param name="name">名称</param>
            <param name="type">表 U、视图 V 存储过程 P</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.Exists(System.String,System.String,System.String)">
            <summary>
            是否存在（表 U、视图 V 存储过程 P）
            </summary>
            <param name="name">名称</param>
            <param name="type">表 U、视图 V 存储过程 P</param>
            <param name="conn">指定链接</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.CreateTable(System.String,CYQ.Data.Table.MDataColumn)">
            <summary>
            为指定的表架构生成SQL(Create Table)语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.CreateTable(System.String,CYQ.Data.Table.MDataColumn,System.String)">
            <summary>
            为指定的表架构生成SQL(Create Table)语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetCreateTableDescriptionSql(System.String)">
            <summary>
            获取指定的表架构生成的SQL(Create Table)的说明语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetCreateTableDescriptionSql(System.String,CYQ.Data.Table.MDataColumn,CYQ.Data.DataBaseType)">
            <summary>
            获取指定的表架构生成的SQL(Create Table)的说明语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetCreateTableSql(System.String)">
            <summary>
            获取指定的表架构生成的SQL(Create Table)的说明语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetCreateTableSql(System.String,CYQ.Data.Table.MDataColumn,CYQ.Data.DataBaseType,System.String)">
            <summary>
            获取指定的表架构生成的SQL(Create Table)的说明语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetAlterTableSql(System.String,CYQ.Data.Table.MDataColumn)">
            <summary>
            获取指定的表架构生成的SQL(Alter Table)的说明语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetAlterTableSql(System.String,CYQ.Data.Table.MDataColumn,System.String)">
            <summary>
            获取指定的表架构生成的SQL(Alter Table)的说明语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.AlterTable(System.String,CYQ.Data.Table.MDataColumn)">
            <summary>
            修改表的列结构
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.AlterTable(System.String,CYQ.Data.Table.MDataColumn,System.String)">
            <summary>
            修改表的列结构
            </summary>
            <param name="tableName">表名</param>
            <param name="columns">列结构</param>
            <param name="conn">数据库链接</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.DropTable(System.String)">
            <summary>
            移除一张表
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.DropTable(System.String,System.String)">
            <summary>
            移除一张表
            <param name="conn">数据库链接</param>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetColumns(System.Type)">
            <summary>
            获取表列架构
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetColumns(System.Object)">
            <summary>
            获取表列架构
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetColumns(System.String,System.String,System.String@)">
            <summary>
            获取表列架构（链接错误时，抛异常）
            </summary>
            <param name="tableName">表名</param>
            <param name="conn">数据库链接</param>
            <param name="errInfo">出错时的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetColumns(System.String,System.String)">
            <summary>
            获取表列架构
            </summary>
            <param name="tableName">表名</param>
            <param name="conn">数据库链接</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.Keyword(System.String,CYQ.Data.DataBaseType)">
            <summary>
            为字段或表名添加关键字标签：如[],''等符号
            </summary>
            <param name="name">表名或字段名</param>
            <param name="dalType">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.NotKeyword(System.String)">
            <summary>
            取消字段或表名添加关键字标签：如[],''等符号
            </summary>
            <param name="name">表名或字段名</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.FormatDefaultValue(CYQ.Data.DataBaseType,System.Object,System.Int32,System.Data.SqlDbType)">
            <summary>
            将各数据库默认值格式化成标准值，将标准值还原成各数据库默认值
            </summary>
            <param name="flag">[0:转成标准值],[1:转成各数据库值]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetDBInfo(System.String)">
            <summary>
            获取单个数据库信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Tool.DBTool.ErrorMsg">
            <summary>
            获取异常的信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.DBTool.DataBases">
            <summary>
            获取配置项中所有的数据库列表
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.JsonSplit">
            <summary>
            分隔Json字符串为字典集合。
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonSplit.Split(System.String,System.Int32)">
            <summary>
            解析Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.JsonSplit.GetValueLength(System.Boolean,System.String,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            获取值的长度（当Json值嵌套以"{"或"["开头时），【优化后】
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonSplit.ToEntityOrList(System.Type,System.String,CYQ.Data.Tool.EscapeOp)">
            <summary>
            支持转换：实体或实体列表二合一
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonSplit.SplitEscapeArray(System.String)">
            <summary>
            将json数组分成字符串List
            </summary>
            <param name="jsonArray">["a,","bbb,,"]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.JsonSplit.GetCharCount(System.String,System.Char)">
            <summary>
            获取字符在字符串出现的次数
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.Tool.CharState">
            <summary>
            字符状态
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.CharState.isStrictMode">
            <summary>
            是否格式格式【true属性必须双引号，false属性可以单引号和无引号。】
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.CharState.arrayStart">
            <summary>
            数组开始【仅第一开头才算】，值嵌套的以【childrenStart】来标识。
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.CharState.keyValueState">
            <summary>
            【-1 未初始化】【0取名阶段】【1 取值阶段】
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.CharState.keyStart">
            <summary>
            【-2 已结束】【-1 未初始化】【0 未开始】【1 无引号开始】【2 单引号开始】【3 双引号开始】
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.CharState.valueStart">
            <summary>
            【-2 已结束】【-1 未初始化】【0 未开始】【1 无引号开始】【2 单引号开始】【3 双引号开始】
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.CharState.IsKeyword(System.Char)">
            <summary>
            设置字符状态(返回true则为关键词，返回false则当为普通字符处理）
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.MDictionary`2">
            <summary>
            线程安全字典类
            </summary>
            <typeparam name="K">key</typeparam>
            <typeparam name="V">value</typeparam>
        </member>
        <member name="M:CYQ.Data.Tool.MDictionary`2.Add(`0,`1)">
            <summary>
            添加值【不存则，则添加；存在，则忽略】
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.MDictionary`2.Get(`0)">
            <summary>
            当Key为int时，通过此方法取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.MDictionary`2.Set(`0,`1)">
            <summary>
            检查值存在【则更新】，不存在则添加
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.MDictionary`2.Item(`0)">
            <summary>
            索引取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Tool.MDictionary`2.Item(System.Int32)">
            <summary>
            通过index索引取值
            </summary>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.Tool.StaticTool">
            <summary>
            静态方法工具类
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.StaticTool.ToGuidByteString(System.String)">
            <summary>
            将GUID转成16字节字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.StaticTool.GetHashKey(System.String)">
            <summary>
            【用于分布式】
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.StaticTool.GetMasterSlaveKey">
            <summary>
            用于标识（以用户为单位）的 主从 的唯一标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.StaticTool.GetTransationKey(System.String)">
            <summary>
            用于标识（以用户为单位）的 全局事务 的唯一标识
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.ThreadBreak">
            <summary>
            在ASP.NET中使用多线程时，为了避开升级dll时产生多个线程互相影响，使用此类可以通过外置文件进行跳出。
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.ClearGlobalThread">
            <summary>
            应用程序退出时，可调用此方法，用于退出全局线程【while循环】。
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.#ctor(System.String,System.Object)">
            <summary>
            提示：AppConfig中需要配置ThreadBreakPath项的路径
            </summary>
            <param name="threadName"></param>
            <param name="threadID"></param>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.NeedToBreak">
            <summary>
            是否需要退出。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.ClearThreadBreak(System.String)">
            <summary>
            清除线程threadbreak文件。
            </summary>
            <param name="threadName">线程名称</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.AddGlobalThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            添加全局线程[通常该线程是个死循环，定时处理事情]
            </summary>
        </member>
        <member name="T:CYQ.Data.UI.MActionUI">
            <summary>
            UI 对外接口
            </summary>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.SetToAll(System.Object,System.Object[])">
            <summary>
            批量对所有控件自动赋值【默认前缀为（txt,ddl,chb）,可通过调用SetAutoPrefix调整】
            </summary>
            <param name="parentControl">父控件（可设置：this）</param>
            <param name="otherParentControls">可选（其它的父控件）</param>
            <example><code>
            action.SetAutoPrefix("txt","ddl");//设置控件的前缀
            action.UI.SetToAll(this);
            </code></example>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.SetTo(System.Object)">
            <summary>
            将值赋给控件
            </summary>
            <param name="control">控件对象</param>
            <example><code>
            示例：action.UI.SetTo(txtUserName);//同于：txtUserName.Text=action.Get&lt;string&gt;(Users.UserName);
            </code></example>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.SetTo(System.Object,System.String)">
            <param name="controlPropName">指定对某个属性赋值</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.SetTo(System.Object,System.String,System.Boolean)">
            <param name="isControlEnabled">设置控件是否可用</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.GetFrom(System.Object)">
            <summary>
            从控件中取值
            </summary>
            <param name="control">控件对象</param>
            <example><code>
            示例：action.UI.GetFrom(txtUserName);//获取TextBox默认Text属性的值
            </code></example>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.GetFrom(System.Object,System.String)">
            <param name="controlPropName">从指定的属性里取值</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.GetFrom(System.Object,System.String,System.Object)">
            <param name="defaultValue">若控件无值，则取此默认值</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.Bind(System.Object)">
            <summary>
            绑定DrowDownList等列表控件
            </summary>
            <param name="control">（下拉）列表控件</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.Bind(System.Object,System.String)">
            <summary>
            绑定DrowDownList等列表控件
            </summary>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.Bind(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            绑定下拉等列表,控件需要继承自：ListControl。
            </summary>
            <param name="control">DropDown/CheckBoxList/RadioButtonList等</param>
            <param name="where">对表的数据进行过滤如:"id>15 and Url='cyqdata.com'"</param>
            <param name="text">绑定时显示的字段名[默认字段名取自控件的id(去掉前三个字母前缀)]</param>
            <param name="value">绑定时显示字段对应的值[默认值的字段名为:id]</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.SetAutoPrefix(System.String,System.String[])">
            <summary>
            自动获取值前缀设置,可传多个前缀[至少1个]
            </summary>
            <param name="autoPrefix">第一个前缀[必须]</param>
            <param name="otherPrefix">后面N个前缀[可选]</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.SetAutoParentControl(System.Object,System.Object[])">
            <summary>
            （Win或WPF）自动获取值父控件设置,可传多个父控件[至少1个]
            </summary>
            <param name="parent">第一个父控件名称[必须，可传：this]</param>
            <param name="otherParent">后面N个[可选]</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.Set(System.Object,System.String,System.Int32,System.Object)">
            <summary>
            MDataRow值-》赋给控件。
            </summary>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.Get(System.Object,System.String,System.Object)">
            <summary>
            从控件里取值-》MDataRow （返回属性名称）
            </summary>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.GetAll(System.Boolean)">
            <summary>
            自动设置列的值(true为插入,false为更新)
            </summary>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.AutoGetValue(CYQ.Data.Table.MDataCell)">
            <summary>
            对单个值自动取值。
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.PrimayAutoGetValue">
            <summary>
            主键自动取值。
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.MutilLanguage">
            <summary>
            多语言操作类
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            实例化
            </summary>
            <param name="filePath">xml文件路径</param>
            <param name="isForHtml">是否Html文件</param>
            <param name="isInitValueFromCookie">是获从Cookie初始化默认语言</param>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.#ctor(System.String,System.Boolean)">
            <summary>
            实例化
            </summary>
            <param name="filePath">xml文件路径</param>
            <param name="isForHtml">是否Html文件</param>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.#ctor(System.String)">
            <summary>
            实例化
            </summary>
            <param name="filePath">xml文件路径</param>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.Get(System.Object)">
            <summary>
            获取多语言节点值
            </summary>
            <param name="lanID">Xml节点id</param>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.Get(System.Object,System.Int32)">
            <summary>
            获取多语言节点值
            </summary>
            <param name="lanID">Xml节点id</param>
            <param name="lanKeyID">LanguageKey对应的数字</param>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.Get(System.Object,CYQ.Data.Xml.LanguageKey)">
            <summary>
            获取多语言节点值
            </summary>
            <param name="lanID">Xml节点id</param>
            <param name="lanEnum">获取的语言</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.SetToCookie(CYQ.Data.Xml.LanguageKey)">
            <summary>
            设置语言类型到Cookie中
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.SetToCookie(System.String)">
            <summary>
            设置语言类型到Cookie中
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.GetKey(System.Int32)">
            <summary>
            获取LanguageKey数字对应的枚举名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.GetValue(System.String)">
            <summary>
            获取LanguageKey枚举对应的数字
            </summary>
            <param name="langKey">LanguageKey枚举名称</param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Xml.MutilLanguage.FilePath">
            <summary>
            获取加载的Xml语言文件的完整（路径）名称
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.MutilLanguage.LanKey">
            <summary>
            获取或设置当前语言类型（如果有设置语言Cookie，则初始化时从Cookie恢复）
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.MutilLanguage.DefaultLanKey">
            <summary>
            获取系统默认的语言（取值顺序：AppConfig.XHtml.SysLangKey - > 浏览器语言 -》 默认中文）
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.Rss">
            <summary>
            Rss操作类
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.Rss.Set(System.String,System.String,System.String)">
            <summary>
            设置网站标题
            </summary>
            <param name="title">网站名称</param>
            <param name="link">网址</param>
            <param name="description">网站描述</param>
        </member>
        <member name="M:CYQ.Data.Xml.Rss.SetImg(System.String,System.String,System.String)">
            <summary>
            设置图片（网站Logo）
            </summary>
            <param name="url">Logo网址</param>
            <param name="title">Logo标题</param>
            <param name="link">Logo点击时跳转链接</param>
        </member>
        <member name="M:CYQ.Data.Xml.Rss.AddItem(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            添加RSS项（文章）
            </summary>
            <param name="title">标题</param>
            <param name="link">链接</param>
            <param name="author">作者</param>
            <param name="pubDate">发布日期</param>
            <param name="description">内容或摘要</param>
        </member>
        <member name="M:CYQ.Data.Xml.Rss.LoadData(CYQ.Data.Table.MDataTable)">
            <summary>
            加载MDataTable,之后可调用SetMap进行字段映射
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:CYQ.Data.Xml.Rss.SetMap(CYQ.Data.Xml.RssItemName,System.String,System.Object[])">
            <summary>
            设置与MDataTable间的字段映射
            </summary>
            <param name="itemName">Rss名称</param>
            <param name="formatText">格式化，如“{0}.Name”，若无需要格式化，直接赋Null值</param>
            <param name="tableColumnNames">同DataTable的字段名称</param>
        </member>
        <member name="P:CYQ.Data.Xml.Rss.Channel">
            <summary>
            RSS 频道（默认）
            </summary>
        </member>
        <member name="E:CYQ.Data.Xml.Rss.OnForeach">
             <summary>
            LoadData（MDataTable）进行映射后，在格式化每一行数据时触发事件
             </summary>
        </member>
        <member name="P:CYQ.Data.Xml.Rss.OutXml">
            <summary>
            获取输出的RSS内容。
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.RssChannel">
            <summary>
            RSS 频道
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Title">
            <summary>
            定义频道的标题
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Link">
            <summary>
            定义指向频道的超链接
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Description">
            <summary>
            描述频道
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Category">
            <summary>
            为 feed 定义所属的一个或多个种类
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Cloud">
            <summary>
            注册进程，以获得 feed 更新的立即通知
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Copyright">
            <summary>
            告知版权资料
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Docs">
            <summary>
            规定指向当前 RSS 文件所用格式说明的 URL
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Generator">
            <summary>
            规定指向当前 RSS 文件所用格式说明的 URL
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Language">
            <summary>
            规定编写 feed 所用的语言
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.LastBuildDate">
            <summary>
            定义 feed 内容的最后修改日期
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.ManagingEditor">
            <summary>
            定义 feed 内容编辑的电子邮件地址
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.PubDate">
            <summary>
            为 feed 的内容定义最后发布日期
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Rating">
            <summary>
            feed 的 PICS 级别
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.SkipDays">
            <summary>
            规定忽略 feed 更新的天
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.SkipHours">
            <summary>
            规定忽略 feed 更新的小时
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.TextInput">
            <summary>
            规定应当与 feed 一同显示的文本输入域
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Ttl">
            <summary>
            指定从 feed 源更新此 feed 之前，feed 可被缓存的分钟数
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.WebMaster">
            <summary>
            定义此 feed 的 web 管理员的电子邮件地址
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.RssImage">
            <summary>
            定义此 feed 的 图片Logo
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Items">
            <summary>
            频道项
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.RssImage">
            <summary>
            图片项
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssImage.Url">
            <summary>
            图片地址
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssImage.Title">
            <summary>
            图片标题
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssImage.Link">
            <summary>
            提供图片的站点链接
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssImage.Description">
            <summary>
            描述频道
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.RssItem">
            <summary>
            RSS项
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Title">
            <summary>
            定义频道的标题
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Link">
            <summary>
            定义指向频道的超链接
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Description">
            <summary>
            描述频道
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Category">
            <summary>
            为 feed 定义所属的一个或多个种类
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Author">
            <summary>
            规定项目作者的电子邮件地址
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Comments">
            <summary>
            允许项目连接到有关此项目的注释（文件）
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Enclosure">
            <summary>
            允许将一个媒体文件导入一个项中
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Guid">
            <summary>
            为 项目定义一个唯一的标识符
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.PubDate">
             <summary>
            定义此项目的最后发布日期
             </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Source">
            <summary>
            为此项目指定一个第三方来源
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.RssItemName">
            <summary>
            RSS 项枚举
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.ValueReplace">
            <summary>
            XHtmlAction 使用时的值替换
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.ValueReplace.Source">
            <summary>
            Set 方法中 原节点的值 ：[#source]
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.ValueReplace.New">
            <summary>
            LoadData加载数据后，数据的值 ：[#new]
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.ValueReplace.LangSplit">
            <summary>
            MutilLanguage 类 Get方法取到值后，按[#langsplit]分隔并按当前语言返回分隔符前面或后面值
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.XHtmlAction">
            <summary>
            Xml/Html操作类
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.XHtmlBase">
            <summary>
            操作Xml及XHtml的基类
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.PreList">
            <summary>
            用于批量赋值（LoadData(MDataRow,pre)方法装载)
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase._XmlDocument">
            <summary>
            xml对象
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.xnm">
            <summary>
            命名空间对象
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.theCache">
            <summary>
            缓存对象
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.htmlNameSpace">
            <summary>
            Html名称空间
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.XmlCacheKey">
            <summary>
            xml缓存的key
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.GenerateKey(System.String)">
            <summary>
            从绝对路径中获得文件名做为Key值
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.docTypeHtml">
            <summary>
            docTypeHtml是一样的。
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.LoadXml(System.String)">
            <summary>
            从xml字符串加载
            </summary>
            <param name="xml">xml字符串</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Load(System.String)">
            <summary>
            从文件中加载Xml
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Load(System.String,CYQ.Data.Xml.XmlCacheLevel)">
            <summary>
            加载XML
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Load(System.String,CYQ.Data.Xml.XmlCacheLevel,System.Boolean)">
            <summary>
            加载Xml文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="level">文件缓存级别</param>
            <param name="clearCommentNode">加载后是否清除注释节点</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.LoadFromCache(System.String)">
            <summary>
            从缓存中加载html
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.RemoveCommentNode">
            <summary>
            移除所有注释节点
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.LoadFromFile(System.String,System.Boolean)">
            <summary>
            从文件加载XML （最终调用的方法）
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.SaveToCache(System.String,System.Boolean)">
            <summary>
            将文档缓存到全局Cache中
            </summary>
            <param name="key">缓存的Key名称</param>
            <param name="isClone">是否克隆副本存档</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.SaveToCache(System.String,System.Boolean,System.Double)">
            <summary>
            将文档缓存到全局Cache中
            </summary>
            <param name="key">缓存的Key名称</param>
            <param name="isClone">是否克隆副本存档</param>
            <param name="cacheTimeMinutes">存档的分钟数</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Save">
            <summary>
            文件保存
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Save(System.String)">
            <param name="fileName">指定保存路径</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.SetCDATA(System.String)">
            <summary>
            给指定的字符加上CDATA
            </summary>
            <param name="text">对象字符</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.ClearCDATA(System.String)">
            <summary>
            清除CDATA
            </summary>
            <param name="text">对象字符</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Filter(System.String)">
            <summary>
            过滤XML(十六进制值 0x1D)无效的字符（同时替换&gt;符号）
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.Encoding">
            <summary>
            文件编码
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.XmlDoc">
            <summary>
            内部XmlDocument对象（ReadOnly）
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.FileName">
            <summary>
            加载的Xml文件的完整（路径）名称（ReadOnly）
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.IsNoClone">
            <summary>
            存取档不克隆（此时XHtml应是只读模式)
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.IsLoadFromCache">
            <summary>
            文档是否取自缓存
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.CacheMinutes">
            <summary>
            缓存分钟数(ReadOnly)
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.OutXml">
            <summary>
            返回最终格式化后的XHtml内容（ReadOnly）
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.IsXHtmlChanged">
            <summary>
            加载的Html是否已改变（ReadOnly）
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.#ctor">
            <summary>
            默认构造函数[操作无名称空间的Xml]
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="isForHtml">true时，将自动载入html的名称空间(http://www.w3.org/1999/xhtml)</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.#ctor(System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="isForHtml">true时，将自动载入html的名称空间(http://www.w3.org/1999/xhtml)</param>
            <param name="isNoClone">true时文档应为只读，所获取是同一份文档引用；false时文档可写，每次获取会克隆一份文档返回。</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="nameSpaceUrl">当Xml的名称空间[若有]</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.Get(System.String)">
            <summary>
            GetByID or GetByName
            </summary>
            <param name="idOrName">id or name</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.AppendNode(System.Xml.XmlNode,System.Xml.XmlNode,System.Int32)">
            <summary>
            添加节点
            </summary>
            <param name="position">parentNode的第N个子节点之后</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.Clear(System.Xml.XmlNode)">
            <summary>
            保留节点,但清除节点所内容/属性
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveChild(System.String,System.Int32)">
            <summary>
            移除子节点
            </summary>
            <param name="id">节点的id</param>
            <param name="start">从第几个子节点开始删除[索引从0开始]</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveChild(System.Xml.XmlNode,System.Int32)">
            <summary>
            移除子节点
            </summary>
            <param name="node">节点</param>
            <param name="start">从第几个子节点开始删除[索引从0开始]</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveAttrList(System.String[])">
            <summary>
            移除多个属性
            </summary>
            <param name="ids">要移除的名称列表</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveAttrList(System.String,CYQ.Data.Xml.SetType)">
            <summary>
            属性移除
            </summary>
            <param name="attrName">属性名称</param>
            <param name="excludeSetType">排除的节点类型</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveCommentNode(System.Xml.XmlNode)">
            <summary>
            移除注释节点
            </summary>
            <param name="node">移除此节点的注释文本</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveCommentNode">
            <summary>
            移除注释节点
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.InterChange(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            两个节点交换位置
            </summary>
            <param name="XNodeFirst">第一个节点</param>
            <param name="XNodeLast">第二个节点</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.ReplaceNode(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            节点替换[支持两个的文档间替换]
            </summary>
            <param name="NewXNode"></param>
            <param name="OldXNode"></param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            节点之后插入[支持两文档之间的插入]
            </summary>
            <param name="NewNode">要被插入的新节点</param>
            <param name="RefNode">在此节点后插入NewNode节点</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            节点之前插入[支持两文档之间的插入]
            </summary>
            <param name="NewNode">要被插入的新节点</param>
            <param name="RefNode">在此节点前插入NewNode节点</param>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlAction.IsUseLangSplit">
            <summary>
            是否开始自定义语言分隔(分隔符号为：[#langsplit])
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.Set(System.Xml.XmlNode,CYQ.Data.Xml.SetType,System.String[])">
            <summary>
            为节点赋值[通常值是在values中赋值]
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.Set(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            对节点赋值（此方法会忽略hidden隐藏域，隐藏节点赋值请用其它重载方法）
            </summary>
            <param name="idOrName"></param>
            <param name="value"></param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.LoadData(System.Object)">
            <summary>
            加载MDataTable的多行数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.LoadData(CYQ.Data.Table.MDataTable)">
            <summary>
            装载数据行 （一般后续配合SetForeach方法使用）
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlAction.KeyValue">
            <summary>
            用于替换占位符的数据。
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.LoadData(System.Object,System.String)">
            <summary>
            加载MDatarow行数据（CMS替换）
            </summary>
            <param name="pre">为所有字段名指定前缀（如："a.",或空前缀：""</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.LoadData(CYQ.Data.Table.MDataRow,System.String)">
            <summary>
            装载数据行 （一般后续配合SetFor方法使用或CMS替换）
            </summary>
            <param name="pre">为所有字段名指定前缀（如："a.",或空前缀：""）</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.LoadData(CYQ.Data.Table.MDataRow)">
            <summary>
            装载行数据 （一般后续配合SetFor方法使用）
            </summary>
            <param name="row">数据行</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.SetFor(System.String)">
            <summary>
            为节点设置值，通常在LoadData后使用。
            </summary>
            <param name="id">节点的id</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.SetFor(System.String,CYQ.Data.Xml.SetType)">
            <summary>
            为节点设置值，通常在LoadData后使用。
            </summary>
            <param name="setType">节点的类型</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.SetFor(System.String,CYQ.Data.Xml.SetType,System.String[])">
            <summary>
            为节点设置值，通常在LoadData后使用。
            </summary>
            <param name="values">setType为Custom时，可自定义值，如“"href","http://www.cyqdata.com","target","_blank"”</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.ToJson">
            <summary>
            转Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.ToJson(System.Xml.XmlNode,System.Boolean)">
            <summary>
            转Json
            <param name="parent">可设置一个节点（默认根节点）</param>
            <param name="isWithAttr">是否将属性值也输出</param>
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlAction.IsCurrentLang">
            <summary>
            当前请求是否用户当前设置的语言
            </summary>
        </member>
        <member name="E:CYQ.Data.Xml.XHtmlAction.OnForeach">
            <summary>
            对于SetForeach函数调用的格式化事件
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlUrlResolver.ResolveUri(System.Uri,System.String)">
            assemblyShortName;component/resourceLocation， 例如"/SilverlightLibraryAssembly;component/image.png"。 请注意，需要使用前导斜杠和 component 关键字（后跟一个斜杠）。
        </member>
        <member name="T:CYQ.Data.Xml.SetType">
            <summary>
            设置操作的节点属性类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.SetType.A">
            <summary>
            A链接标识，最多可赋4个值为:InnerXml,href,title,target
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.SetType.Custom">
            <summary>
            自定义，以“属性,值,属性,值”这样的对应设置，无个数限制。
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.LanguageKey">
            <summary>
            语言种类
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.None">
            <summary>
            未设置状态
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Chinese">
            <summary>
            中文
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.English">
            <summary>
            英文
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.French">
            <summary>
            法语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.German">
            <summary>
            德语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Korean">
            <summary>
            韩语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Japanese">
            <summary>
            日语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Hindi">
            <summary>
            印地语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Russian">
            <summary>
             俄语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Italian">
            <summary>
            意大利语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Custom">
            <summary>
            自定义语言
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.XmlCacheLevel">
            <summary>
            Xml|XHtml 加载后缓存级别
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.NoCache">
            <summary>
            无缓存
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Lower">
            <summary>
            低缓存,5分钟
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Default">
            <summary>
            默认取自配置项CacheTime时间,
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Minute">
            <summary>
            1分钟
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Hour">
            <summary>
            1小时
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Day">
            <summary>
            1天时间
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Week">
            <summary>
            一周时间
            </summary>
        </member>
    </members>
</doc>
