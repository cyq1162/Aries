<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aries.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNetCore.Http.AriesMiddleware">
            <summary>
            为支持Asp.net core 存在的文件
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.AriesExtensions.UseAries(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Object)">
            <summary>
            Net Core 3.1 把IHostingEnvironment 拆分成了：IWebHostEnvironment和IHostEnvironment 
            所以增加重载方法适应。
            </summary>
            <param name="builder"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="P:Aries.Core.Auth.ActionKeyAttribute.Key">
            <summary>
            多个用字符串分隔，如:"add,edit"
            </summary>
        </member>
        <member name="T:Aries.Core.Auth.Permission">
            <summary>
            权限类
            </summary>
        </member>
        <member name="F:Aries.Core.Auth.Permission.midTableNameList">
            <summary>
            记录页面对应可操作的对应：（降低安全问题）（mid：TableName）
            </summary>
        </member>
        <member name="F:Aries.Core.Auth.Permission.parentidList">
            <summary>
            记录内面的上级id（降低安全问题）（Url,mid）
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.Permission.MenuID">
            <summary>
            菜单id（可能是上级菜单id，不一定针对当前请求页面)
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.Permission.UrlMenuID">
            <summary>
            针对Url当前请求获取的菜单id
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.Permission.MenuName">
            <summary>
            当前页面的菜单名称
            </summary>
        </member>
        <member name="M:Aries.Core.Auth.Permission.CheckMenu(System.Uri)">
            <summary>
            检测是否拥有某个菜单的浏览权限
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Aries.Core.Auth.Permission.HasMenu(System.Uri)">
            <summary>
            是否拥有菜单的权限
            </summary>
            <param name="url">菜单的相对路径</param>
        </member>
        <member name="M:Aries.Core.Auth.Permission.HasMenu">
            <summary>
            是否拥有菜单的权限
            </summary>
        </member>
        <member name="M:Aries.Core.Auth.Permission.HasMenu(System.String)">
            <summary>
            是否拥有菜单的权限
            </summary>
        </member>
        <member name="M:Aries.Core.Auth.Permission.HasFunc(System.String)">
            <summary>
            是否拥有某项二级权限
            </summary>
        </member>
        <member name="M:Aries.Core.Auth.Permission.GetFuncKeys">
            <summary>
            获取当前菜单下的FuncKeys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Auth.Permission.GetFuncKeys(System.String)">
            <summary>
            获取指定菜单下的FuncKeys
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aries.Core.Auth.Permission.UserMenu">
            <summary>
            用户的权限列表
            </summary>
        </member>
        <member name="T:Aries.Core.Auth.SysMenu">
            <summary>
            系统菜单相关类
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.SysMenu.MenuTable">
            <summary>
            菜单表（全局缓存）
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.SysMenu.ActionTable">
            <summary>
            菜单功能表（全局缓存）
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.SysMenu.SysMenuAction">
            <summary>
            系统菜单（功能项变成子节点）
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.SysMenu.UserMenu">
            <summary>
            当前登陆用户的菜单
            </summary>
        </member>
        <member name="M:Aries.Core.Auth.SysMenu.RoleActionToDic(CYQ.Data.Table.MDataTable,System.Boolean)">
            <summary>
            角色权限表转字典
            </summary>
            <param name="onlyID">默认需要引用名，true时引用id</param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Auth.SysMenu.HasChild(System.String,CYQ.Data.Table.MDataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            是否拥有下级的菜单权限
            </summary>
            <param name="menuID">当前菜单id</param>
            <param name="menuDt">整个菜单表</param>
            <param name="dic">当前用户拥有权限的的菜单</param>
            <returns></returns>
        </member>
        <member name="T:Aries.Core.Auth.UserAuth">
            <summary>
            用户登陆相关操作类
            </summary>
        </member>
        <member name="M:Aries.Core.Auth.UserAuth.GetAuthToken(System.String,System.String,System.String@)">
            <summary>
            获取授权Token（手机APP登陆调用此方法获取Token为登陆凭证）
            </summary>
        </member>
        <member name="M:Aries.Core.Auth.UserAuth.Login(System.String,System.String,System.String@)">
            <summary>
            用户登陆（电脑PC端调用此方法，登陆成功会自动跳转到Index.html首页；手机端请调用GetAuthToken方法）
            </summary>
        </member>
        <member name="M:Aries.Core.Auth.UserAuth.RefleshToken">
            <summary>
            刷新Token的时间
            </summary>
        </member>
        <member name="M:Aries.Core.Auth.UserAuth.IsExistsToken(System.Boolean)">
            <summary>
            验证用户是否在线(For PC电脑端）
            </summary>
            <param name="isRedirect">未登陆时是否跳转到登陆界面</param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Auth.UserAuth.Logout">
            <summary>
            退出
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.UserAuth.UserName">
            <summary>
            获取当前登陆账号的登陆id
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.UserAuth.FullName">
            <summary>
            获取当前登陆账号的用户名称
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.UserAuth.RoleIDs">
            <summary>
            用户的角色ids
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.UserAuth.OrgIDs">
            <summary>
            用户的组织ids
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.UserAuth.IsAdmin">
            <summary>
            是否普通管理员账号(运营级别)
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.UserAuth.IsSuperAdmin">
            <summary>
            是否系统管理员账号(开发级别)
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.UserAuth.OnlineCount">
            <summary>
            当前电脑PC端在线人数
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.UserAuth.User">
            <summary>
            获取当前用户信息行。
            </summary>
        </member>
        <member name="P:Aries.Core.Auth.UserAuth.Token">
            <summary>
            获取当前登陆账号的Token（先取Request，再取Cookie值）
            </summary>
        </member>
        <member name="F:Aries.Core.Controller.streamList">
            <summary>
            用于错误Excel的下载输出。
            </summary>
        </member>
        <member name="F:Aries.Core.Controller.keyValue">
            <summary>
            保存表单要修改的键值对。
            </summary>
        </member>
        <member name="F:Aries.Core.Controller.jsonResult">
            <summary>
            最终被输出的Json结果
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.MethodInvoke(System.String)">
            <summary>
            执行其他业务
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.PreBeforeInvoke(System.String,System.String@)">
            <summary>
            增加这一步做进一步的权限验证
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.SetKeyValue(System.String,System.String)">
            <summary>
            设置表单要修改的值。
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.GetWhere">
            <summary>
            构造Where条件
            </summary>
        </member>
        <member name="F:Aries.Core.Controller.excelStream">
            <summary>
            Excel文件数据流（当导入验证失败需要返回Excel文件时，可以对此属性赋值。)
            </summary>
        </member>
        <member name="P:Aries.Core.Controller.OutputExcelName">
            <summary>
            文件数据流对应的输出文件名。
            </summary>
        </member>
        <member name="F:Aries.Core.Controller.CancelInvoke">
            <summary>
            取消继续调用事件（可以在重载BeforeInvoke方法内使用）
            </summary>
        </member>
        <member name="P:Aries.Core.Controller.ObjCode">
            <summary>
            对名对称对应的SQL语句
            </summary>
        </member>
        <member name="P:Aries.Core.Controller.ObjName">
            <summary>
            远程传过来的对象名称
            </summary>
        </member>
        <member name="P:Aries.Core.Controller.TableName">
            <summary>
            对象视图名称的主表名
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.Select(Aries.Core.Config.GridConfig.SelectType)">
            <summary>
            允许重写导出的数据源（适用于存储过程的自定义数据源）
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.GetOne">
            <summary>
            获取一行数据。
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.Add">
            <summary>
            添加一条数据
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.SetKeyValue(CYQ.Data.Table.MDataRow)">
            <summary>
            在进行新增加前处理的事件（action参数不需要关闭）。
            数据行直接拿action.Data
            返回true则继续执行更新，返回false则停止更新。
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.Delete">
            <summary>
            删除数据（传id则一条，也可以构造where条件删除）
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.Update">
            <summary>
            更新一条数据
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.Export">
            <summary>
            导出数据
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.ExcelTemplate">
            <summary>
            获取导入数据的模板（支持2007以上）
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.Down">
            <summary>
            下载错误的Excel列表。
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.Import">
            <summary>
            导入数据
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.FormatExcel(CYQ.Data.Table.MDataTable,CYQ.Data.Table.MDataRow)">
            <summary>
            格式化Excel列头和Config_KeyValue数据。
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.BeforeImport(CYQ.Data.Table.MDataTable,CYQ.Data.Table.MDataRow,System.String@)">
            <summary>
            可以对导入的数据进行验证
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.GetInitConfig">
            <summary>
            获取UI、Mid、ActionKey的配置值。
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.GetKeyValueConfig">
            <summary>
            获取Config_KeyValue的配置值。
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.GetHeader">
            <summary>
            获取表的列头数据（输出EasyUI的列头格式）
            </summary>
        </member>
        <member name="T:Aries.Core.Controller.ComboItem">
            <summary>
            下拉框统一处理参数对象
            </summary>
        </member>
        <member name="M:Aries.Core.Controller.GetCombobox">
            <summary>
            获取下拉框Json结果集(统一处理）
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aries.Core.Controller.IsUseUISite">
            <summary>
            是否使用子应用程序部署
            </summary>
        </member>
        <member name="P:Aries.Core.Controller.PageIndex">
            <summary>
            datagrid分页的页码数
            </summary>
        </member>
        <member name="P:Aries.Core.Controller.PageSize">
            <summary>
            datagrid分页的页容量
            </summary>
        </member>
        <member name="P:Aries.Core.Controller.Sort">
            <summary>
            排序字段名
            </summary>
        </member>
        <member name="P:Aries.Core.Controller.Order">
            <summary>
            排序类型（升或降）
            </summary>
        </member>
        <member name="T:Aries.Core.ImportResult">
            <summary>
            BeForeImport的结果参数
            </summary>
        </member>
        <member name="F:Aries.Core.ImportResult.Continue">
            <summary>
            继续执行原有流程。
            </summary>
        </member>
        <member name="F:Aries.Core.ImportResult.True">
            <summary>
            中止执行，并返回True结果
            </summary>
        </member>
        <member name="F:Aries.Core.ImportResult.False">
            <summary>
             中止执行，并返回False结果
            </summary>
        </member>
        <member name="T:Aries.Core.RouteConfig">
            <summary>
            路由系统
            </summary>
        </member>
        <member name="P:Aries.Core.RouteConfig.RouteMode">
            <summary>
            配置模式【值为1或2】
            值为1：匹配{Controller}/{Action}/{Para}
            值为2：匹配{Module}/{Controller}/{Action}/{Para}
            </summary>
        </member>
        <member name="T:Aries.Core.Config.ExcelConfig">
            <summary>
            Excel配置组件核心类
            </summary>
        </member>
        <member name="M:Aries.Core.Config.ExcelConfig.GetExcelRow(System.String)">
            <summary>
            获取表配置信息
            </summary>
        </member>
        <member name="M:Aries.Core.Config.ExcelConfig.GetExcelInfo(System.String)">
            <summary>
            获取具体列配置信息。
            </summary>
            <param name="excelid"></param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Config.ExcelConfig.FormatterTitle(CYQ.Data.Table.MDataTable,CYQ.Data.Table.MDataRow,System.String)">
            <summary>
            导入时：把中文列头翻译成英文列头（同时处理列头结构）。
            并返回字典：key:列头,value:格式化名
            </summary>
        </member>
        <member name="M:Aries.Core.Config.ExcelConfig.ValidateData(CYQ.Data.Table.MDataTable,CYQ.Data.Table.MDataRow)">
            <summary>
            验证基础数据(数据类型、长度、是否为Null）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Config.ExcelConfig.AcceptChanges(CYQ.Data.Table.MDataTable,CYQ.Data.Table.MDataRow,System.String)">
            <summary>
            批量更新或插入。
            </summary>
            <param name="dt"></param>
            <param name="excelRow"></param>
            <returns></returns>
        </member>
        <member name="T:Aries.Core.Config.ExcelConfigFactory">
            <summary>
            将Excel导入的过程的扩展移到外部，允许业务扩展。
            </summary>
        </member>
        <member name="T:Aries.Core.Config.GridConfig">
            <summary>
            表格头配置专用类（By CYQ）操作：Config_Grid 表
            </summary>
        </member>
        <member name="F:Aries.Core.Config.GridConfig.SelectType.All">
            <summary>
            所有
            </summary>
        </member>
        <member name="F:Aries.Core.Config.GridConfig.SelectType.Show">
            <summary>
            非隐藏字段
            </summary>
        </member>
        <member name="F:Aries.Core.Config.GridConfig.SelectType.Export">
            <summary>
            导出字段
            </summary>
        </member>
        <member name="F:Aries.Core.Config.GridConfig.SelectType.Import">
            <summary>
            导入字段
            </summary>
        </member>
        <member name="F:Aries.Core.Config.GridConfig.SelectType.ImportUnique">
            <summary>
            导入唯一
            </summary>
        </member>
        <member name="M:Aries.Core.Config.GridConfig.GetList(System.String,Aries.Core.Config.GridConfig.SelectType)">
            <summary>
            读取列表
            </summary>
        </member>
        <member name="M:Aries.Core.Config.GridConfig.Create(System.String,System.String,CYQ.Data.Table.MDataTable)">
            <summary>
            创建数据结构行
            </summary>
        </member>
        <member name="M:Aries.Core.Config.GridConfig.Flesh(System.String,System.String,CYQ.Data.Table.MDataTable,System.String@)">
            <summary>
            数据结构行刷新
            </summary>
            <param name="objName"></param>
            <param name="objCode"></param>
            <param name="dt">原有数据</param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Config.GridConfig.GetFormatter(CYQ.Data.Table.MDataTable)">
            <summary>
            返回格式化并设置以下内容：
            1：设置字段Description描述；2：设置翻译字段的数据类型。
            key:ColumnName value:Formatter
            </summary>
            <param name="dt">表数据（dt.DynamicData 存档列头数据）</param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Config.GridConfig.SetHeaderField(CYQ.Data.Table.MDataTable,System.String)">
            <summary>
            还原中文列头为字段名，并返回需要格式化的字段名(同时设置字段类型为NVarChar)和配置项（导入时调用到）
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Aries.Core.Config.GridConfig.HasObjNameInRule(System.String,System.String)">
            <summary>
            配置列表中的规则字段【Rules】是否配置了相关的objName属性。
            </summary>
            <param name="objName"></param>
            <param name="whereObjName"></param>
            <returns></returns>
        </member>
        <member name="P:Aries.Core.Config.IExcelConfig.IsUse">
            <summary>
            启用标识
            </summary>
        </member>
        <member name="T:Aries.Core.Config.ExcelResult">
            <summary>
            BeForeImport的结果参数
            </summary>
        </member>
        <member name="F:Aries.Core.Config.ExcelResult.Default">
            <summary>
            正常继续执行后面代码
            </summary>
        </member>
        <member name="F:Aries.Core.Config.ExcelResult.Ignore">
            <summary>
            忽略此行（不执行后续代码）。
            </summary>
        </member>
        <member name="F:Aries.Core.Config.ExcelResult.Error">
            <summary>
            中止执行，事务回滚
            </summary>
        </member>
        <member name="T:Aries.Core.Config.KeyValueConfig">
            <summary>
            键值对配置专用类（By CYQ）操作：Config_KeyValue 表
            </summary>
            <summary>
            单行的基础操作
            </summary>
        </member>
        <member name="P:Aries.Core.Config.KeyValueConfig.KeyValueTable">
            <summary>
            配置表（全局缓存）
            </summary>
        </member>
        <member name="M:Aries.Core.Config.KeyValueConfig.IsChangeLangConfig(System.String)">
            <summary>
            是否修改的是语言相关的配置
            </summary>
        </member>
        <member name="M:Aries.Core.Config.KeyValueConfig.GetJson">
            <summary>
            获取JavaScript Json
            </summary>
        </member>
        <member name="M:Aries.Core.Config.KeyValueConfig.GetTableDescription(System.String,System.String)">
            <summary>
            获取表的描述。
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Config.KeyValueConfig.FormatNameValue(CYQ.Data.Table.MDataTable,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            翻译键名称=>值 或 键值=>名称。
            </summary>
            <param name="dt"></param>
            <param name="formatParas">格式化的字段名和配置项</param>
            <param name="isValueToName">[true:值=>名称],[false:名称=>值]</param>
        </member>
        <member name="M:Aries.Core.Config.KeyValueConfig.GetValidationData(CYQ.Data.Table.MDataTable)">
            <summary>
            本方法扩展供Excel导出的数据验证使用
            </summary>
        </member>
        <member name="M:Aries.Core.Config.KeyValueConfig.SetFormatterValFromSql(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String[]})">
            <summary>
            构造包含级联的数据字典
            </summary>
            <param name="formatParas"></param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Config.KeyValueConfig.GetName(System.String,System.String)">
            <summary>
            根据配置Key和Value获取对应的名称。
            </summary>
        </member>
        <member name="M:Aries.Core.Config.KeyValueConfig.GetValue(System.String,System.String)">
            <summary>
            根据配置Key和Name获取对应的名称。
            </summary>
        </member>
        <member name="M:Aries.Core.Config.KeyValueConfig.SetName(System.String,System.String,System.String)">
            <summary>
            根据配置Key和Value设置对应的名称。
            </summary>
        </member>
        <member name="M:Aries.Core.Config.KeyValueConfig.SetValue(System.String,System.String,System.String)">
            <summary>
            根据配置Key和Name设置对应的名称。
            </summary>
        </member>
        <member name="T:Aries.Core.Config.LangConst">
            <summary>
            中文常量 (使用静态变量，是考虑到多做多语言时，可以在运行时拦截，动态修改文字为英文版本)
            </summary>
        </member>
        <member name="M:Aries.Core.Config.LangConst.InitKeyValue">
            <summary>
            初始化多语言
            </summary>
        </member>
        <member name="M:Aries.Core.Config.LangConst.ReplateHtmlLanguage(System.String)">
            <summary>
            替换页面标签
            </summary>
        </member>
        <member name="T:Aries.Core.Extend.Combobox">
            <summary>
            下拉框集合
            </summary>
        </member>
        <member name="M:Aries.Core.Extend.Combobox.Get(System.String,System.String)">
            <summary>
            读取数据库所有表
            </summary>
            <param name="key">关键字</param>
            <param name="filter">过滤条件值</param>
            <returns></returns>
        </member>
        <member name="T:Aries.Core.Extend.HttpResponseFilter">
            <summary>
            处理本项目部署成子应用程序时，多了一个目录的问题。
            </summary>
        </member>
        <member name="M:Aries.Core.Extend.HttpResponseFilter.#ctor(System.IO.Stream)">
            <summary>
            构造函数
            </summary>
            <param name="stream">参数为：HttpContext.Current.Response.Filter</param>
            <param name="replaceHtmlTextList">字典集合：key为被替换正则表达式,value为替换的字符串</param>
        </member>
        <member name="T:Aries.Core.InvokeLogic">
            <summary>
            反射Logic类
            </summary>
        </member>
        <member name="P:Aries.Core.InvokeLogic.DllNames">
            <summary>
            Dll名称，多个则用，号分隔
            </summary>
        </member>
        <member name="M:Aries.Core.InvokeLogic.GetControllers">
            <summary>
            获取控制器
            </summary>
        </member>
        <member name="M:Aries.Core.InvokeLogic.GetType(System.String)">
            <summary>
            通过XXX.className类名获得对应的Controller类
            </summary>
            <param name="className"></param>
            <param name="typeFlag">0：Ajax控制器；1：View控制器</param>
            <returns></returns>
        </member>
        <member name="T:Aries.Core.SessionHandler">
            <summary>
            实现IHttpModule中使用Session
            </summary>
        </member>
        <member name="T:Aries.Core.Sql.SqlCode">
            <summary>
            操作SQL外置文件类
            </summary>
        </member>
        <member name="F:Aries.Core.Sql.SqlCode.path">
            <summary>
            SQL文件存档路径
            </summary>
        </member>
        <member name="P:Aries.Core.Sql.SqlCode.FileList">
            <summary>
            获取所有的SQL文件字典
            </summary>
        </member>
        <member name="M:Aries.Core.Sql.SqlCode.DealSql(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            处理单个Sql.sql里面的单行SQL语句
            </summary>
            <param name="path"></param>
            <param name="fileList"></param>
        </member>
        <member name="M:Aries.Core.Sql.SqlCode.Get(System.String)">
            <summary>
            根据名称获取原始的SQL（或视图）语句
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Sql.SqlCode.Save(System.String,System.String,System.String@)">
            <summary>
            根据名称保存原始的SQL（或视图）语句
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Sql.SqlCode.GetCode(System.String,System.Object[])">
            <summary>
            根据名称获取SQL（或视图）语句 （已经处理过注释，和参数替换的内容）
            </summary>
            <param name="key"></param>
            <param name="stringFormatValues">如果需要格式化大括号参数</param>
            <returns></returns>
        </member>
        <member name="T:Aries.Core.Sql.SqlFormat">
            <summary>
            搜索条件格式化。(从Json格式化成sql语句）
            </summary>
        </member>
        <member name="T:Aries.Core.DB.U_AriesEnum">
            <summary>
            使用多数据库枚举，可以空出默认的Conn给其它数据库使用
            </summary>
        </member>
        <member name="T:Aries.Core.Helper.ExcelHelper">
            <summary>
            新版本用的（Excel导入和导出功能）
            </summary>
        </member>
        <member name="F:Aries.Core.Helper.ExcelHelper.WorkBookType.Aoto">
            <summary>
            自动处理
            </summary>
        </member>
        <member name="F:Aries.Core.Helper.ExcelHelper.WorkBookType.Low">
            <summary>
            97-2007
            </summary>
        </member>
        <member name="F:Aries.Core.Helper.ExcelHelper.WorkBookType.High">
            <summary>
            2007以上
            </summary>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.GetCellRange(NPOI.SS.UserModel.ISheet,NPOI.SS.UserModel.ICell)">
            <summary>
            获取合并单元格的合并行。
            </summary>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.GetMergedRegion(NPOI.SS.UserModel.ISheet,NPOI.SS.UserModel.ICell)">
            <summary>
            获取合并单元格的首格。
            </summary>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.GetStyle(NPOI.SS.UserModel.IWorkbook,System.Int16)">
            <summary>
            获取样式
            </summary>
            <param name="book"></param>
            <param name="colorIndex">如：NPOI.HSSF.Util.HSSFColor.RED.index</param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.CreateExcel(CYQ.Data.Table.MDataTable)">
            <summary>
            导出Excel和数据
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.ReadExcel(System.IO.Stream,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            读取Excel头（特殊点：多级表头会组合名称）
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.ReadExcel(NPOI.SS.UserModel.IWorkbook,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            读取上传文件中的Excel（返回表格，如果需要导入，还需要格式化表头）
            </summary>
            <param name="workbook">Excel工作本</param>
            <param name="sheetIndex">第N个Sheet表格</param>
            <param name="isMergedCellName">是否把合并列头的名称连接起来</param>
            <param name="startIndex">开始索引</param>
            <param name="headCrossRowNum">头部跨行数（为0时自动识别）</param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.SetError(System.Collections.Generic.List{CYQ.Data.Table.MDataTable})">
            <summary>
            指量为多个Sheet写错误信息，并返回最终Excel流。
            </summary>
            <param name="dtList"></param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.SetError(CYQ.Data.Table.MDataTable,System.Boolean)">
            <summary>
            将错误信息写回原始存档中，并返回文件流。
            </summary>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.CreateExcelHeader(CYQ.Data.Table.MDataTable,System.Collections.Generic.Dictionary{System.String,System.String[]})">
            <summary>
            导出Excel列头模板
            </summary>
            <param name="header">列头数据</param>
            <param name="validateData">有效性数据</param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.CreateValidationSheet(NPOI.SS.UserModel.IWorkbook,System.Collections.Generic.Dictionary{System.String,System.String[]})">
            <summary>
            生成Sheet2的下拉验证数据
            </summary>
            <param name="export"></param>
            <param name="validateData"></param>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.CreateCascadeSheet(NPOI.SS.UserModel.ISheet,CYQ.Data.Table.MDataTable,System.Collections.Generic.Dictionary{System.String,System.String[]},System.Int32)">
            <summary>
            生成Sheet的级联指定
            </summary>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.SetData(NPOI.SS.UserModel.ISheet,CYQ.Data.Table.MDataTable,System.Int32)">
            <summary>
            设置Excel数据
            </summary>
            <param name="dt">数据表</param>
            <param name="startIndex">数据的起始索引</param>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.SetHeader(NPOI.SS.UserModel.IWorkbook,CYQ.Data.Table.MDataTable,CYQ.Data.Table.MDataColumn,System.Int32@)">
            <summary>
             设置Excel列头数据（支持多级表头）。
            <param name="maxLevel">表头的层级数</param>
            </summary>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.GetColumnGroup(CYQ.Data.Table.MDataTable)">
            <summary>
            获得多表头层级，并分组(算法和前端Aries.Common.Js里的getColumnGroup一致)
            </summary>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.ConvertIndexToChar(System.Int32)">
            <summary>
            索引转换为excel字母列名
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.ReadWorkbook(System.IO.Stream)">
            <summary>
            获取Excel整体接口
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Helper.ExcelHelper.GetSheetName(NPOI.SS.UserModel.IWorkbook)">
            <summary>
            取Excelsheet名集合
            </summary>
            <param name="workbook"></param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Helper.WebHelper.GetDefaultUrl">
            <summary>
            默认首页设置
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aries.Core.Helper.WebHelper.IsUseUISite">
            <summary>
            是否部署成子目录（虚拟目录）
            </summary>
        </member>
        <member name="M:Aries.Core.Helper.WebHelper.IsAriesSuffix">
            <summary>
            默认是否.html结尾
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Helper.WebHelper.IsCheckToken">
            <summary>
            以下包含的路径必须登陆后才能访问
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Helper.WebHelper.FilterValue(System.String)">
            <summary>
            过滤一般的字符串
            </summary>
            <param name="strFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Aries.Core.Helper.WebHelper.SendFile(System.String,System.IO.MemoryStream,System.Text.Encoding)">
            <summary>
            把内存流（文件）发送到客户端
            </summary>
            <param name="fileName">文件名称</param> 
            <param name="ms">文件流</param>
            <param name="response">响应客户端对象</param>  
        </member>
        <member name="T:Aries.Core.UrlRewrite">
            <summary>
            权限检测模块
            </summary>
        </member>
        <member name="M:Aries.Core.UrlRewrite.AuthCheck(System.Boolean)">
            <summary>
            默认仅对Web目录和首页index.html进行登陆权限检测。
            </summary>
        </member>
    </members>
</doc>
